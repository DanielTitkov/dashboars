// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/item"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/task"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/taskinstance"
)

// TaskInstanceUpdate is the builder for updating TaskInstance entities.
type TaskInstanceUpdate struct {
	config
	hooks    []Hook
	mutation *TaskInstanceMutation
}

// Where appends a list predicates to the TaskInstanceUpdate builder.
func (tiu *TaskInstanceUpdate) Where(ps ...predicate.TaskInstance) *TaskInstanceUpdate {
	tiu.mutation.Where(ps...)
	return tiu
}

// SetUpdateTime sets the "update_time" field.
func (tiu *TaskInstanceUpdate) SetUpdateTime(t time.Time) *TaskInstanceUpdate {
	tiu.mutation.SetUpdateTime(t)
	return tiu
}

// SetStartTime sets the "start_time" field.
func (tiu *TaskInstanceUpdate) SetStartTime(t time.Time) *TaskInstanceUpdate {
	tiu.mutation.SetStartTime(t)
	return tiu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableStartTime(t *time.Time) *TaskInstanceUpdate {
	if t != nil {
		tiu.SetStartTime(*t)
	}
	return tiu
}

// SetEndTime sets the "end_time" field.
func (tiu *TaskInstanceUpdate) SetEndTime(t time.Time) *TaskInstanceUpdate {
	tiu.mutation.SetEndTime(t)
	return tiu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableEndTime(t *time.Time) *TaskInstanceUpdate {
	if t != nil {
		tiu.SetEndTime(*t)
	}
	return tiu
}

// ClearEndTime clears the value of the "end_time" field.
func (tiu *TaskInstanceUpdate) ClearEndTime() *TaskInstanceUpdate {
	tiu.mutation.ClearEndTime()
	return tiu
}

// SetSuccess sets the "success" field.
func (tiu *TaskInstanceUpdate) SetSuccess(b bool) *TaskInstanceUpdate {
	tiu.mutation.SetSuccess(b)
	return tiu
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableSuccess(b *bool) *TaskInstanceUpdate {
	if b != nil {
		tiu.SetSuccess(*b)
	}
	return tiu
}

// ClearSuccess clears the value of the "success" field.
func (tiu *TaskInstanceUpdate) ClearSuccess() *TaskInstanceUpdate {
	tiu.mutation.ClearSuccess()
	return tiu
}

// SetRunning sets the "running" field.
func (tiu *TaskInstanceUpdate) SetRunning(b bool) *TaskInstanceUpdate {
	tiu.mutation.SetRunning(b)
	return tiu
}

// SetNillableRunning sets the "running" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableRunning(b *bool) *TaskInstanceUpdate {
	if b != nil {
		tiu.SetRunning(*b)
	}
	return tiu
}

// SetError sets the "error" field.
func (tiu *TaskInstanceUpdate) SetError(s string) *TaskInstanceUpdate {
	tiu.mutation.SetError(s)
	return tiu
}

// SetNillableError sets the "error" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableError(s *string) *TaskInstanceUpdate {
	if s != nil {
		tiu.SetError(*s)
	}
	return tiu
}

// ClearError clears the value of the "error" field.
func (tiu *TaskInstanceUpdate) ClearError() *TaskInstanceUpdate {
	tiu.mutation.ClearError()
	return tiu
}

// SetMeta sets the "meta" field.
func (tiu *TaskInstanceUpdate) SetMeta(m map[string]interface{}) *TaskInstanceUpdate {
	tiu.mutation.SetMeta(m)
	return tiu
}

// ClearMeta clears the value of the "meta" field.
func (tiu *TaskInstanceUpdate) ClearMeta() *TaskInstanceUpdate {
	tiu.mutation.ClearMeta()
	return tiu
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (tiu *TaskInstanceUpdate) AddItemIDs(ids ...int) *TaskInstanceUpdate {
	tiu.mutation.AddItemIDs(ids...)
	return tiu
}

// AddItems adds the "items" edges to the Item entity.
func (tiu *TaskInstanceUpdate) AddItems(i ...*Item) *TaskInstanceUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tiu.AddItemIDs(ids...)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (tiu *TaskInstanceUpdate) SetTaskID(id int) *TaskInstanceUpdate {
	tiu.mutation.SetTaskID(id)
	return tiu
}

// SetTask sets the "task" edge to the Task entity.
func (tiu *TaskInstanceUpdate) SetTask(t *Task) *TaskInstanceUpdate {
	return tiu.SetTaskID(t.ID)
}

// Mutation returns the TaskInstanceMutation object of the builder.
func (tiu *TaskInstanceUpdate) Mutation() *TaskInstanceMutation {
	return tiu.mutation
}

// ClearItems clears all "items" edges to the Item entity.
func (tiu *TaskInstanceUpdate) ClearItems() *TaskInstanceUpdate {
	tiu.mutation.ClearItems()
	return tiu
}

// RemoveItemIDs removes the "items" edge to Item entities by IDs.
func (tiu *TaskInstanceUpdate) RemoveItemIDs(ids ...int) *TaskInstanceUpdate {
	tiu.mutation.RemoveItemIDs(ids...)
	return tiu
}

// RemoveItems removes "items" edges to Item entities.
func (tiu *TaskInstanceUpdate) RemoveItems(i ...*Item) *TaskInstanceUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tiu.RemoveItemIDs(ids...)
}

// ClearTask clears the "task" edge to the Task entity.
func (tiu *TaskInstanceUpdate) ClearTask() *TaskInstanceUpdate {
	tiu.mutation.ClearTask()
	return tiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tiu *TaskInstanceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tiu.defaults()
	if len(tiu.hooks) == 0 {
		if err = tiu.check(); err != nil {
			return 0, err
		}
		affected, err = tiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tiu.check(); err != nil {
				return 0, err
			}
			tiu.mutation = mutation
			affected, err = tiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tiu.hooks) - 1; i >= 0; i-- {
			if tiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tiu *TaskInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := tiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tiu *TaskInstanceUpdate) Exec(ctx context.Context) error {
	_, err := tiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiu *TaskInstanceUpdate) ExecX(ctx context.Context) {
	if err := tiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tiu *TaskInstanceUpdate) defaults() {
	if _, ok := tiu.mutation.UpdateTime(); !ok {
		v := taskinstance.UpdateDefaultUpdateTime()
		tiu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tiu *TaskInstanceUpdate) check() error {
	if _, ok := tiu.mutation.TaskID(); tiu.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskInstance.task"`)
	}
	return nil
}

func (tiu *TaskInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskinstance.Table,
			Columns: taskinstance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: taskinstance.FieldID,
			},
		},
	}
	if ps := tiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskinstance.FieldUpdateTime,
		})
	}
	if value, ok := tiu.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskinstance.FieldStartTime,
		})
	}
	if value, ok := tiu.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskinstance.FieldEndTime,
		})
	}
	if tiu.mutation.EndTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: taskinstance.FieldEndTime,
		})
	}
	if value, ok := tiu.mutation.Success(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taskinstance.FieldSuccess,
		})
	}
	if tiu.mutation.SuccessCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: taskinstance.FieldSuccess,
		})
	}
	if value, ok := tiu.mutation.Running(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taskinstance.FieldRunning,
		})
	}
	if value, ok := tiu.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taskinstance.FieldError,
		})
	}
	if tiu.mutation.ErrorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: taskinstance.FieldError,
		})
	}
	if value, ok := tiu.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: taskinstance.FieldMeta,
		})
	}
	if tiu.mutation.MetaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: taskinstance.FieldMeta,
		})
	}
	if tiu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskinstance.ItemsTable,
			Columns: []string{taskinstance.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiu.mutation.RemovedItemsIDs(); len(nodes) > 0 && !tiu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskinstance.ItemsTable,
			Columns: []string{taskinstance.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiu.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskinstance.ItemsTable,
			Columns: []string{taskinstance.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tiu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskinstance.TaskTable,
			Columns: []string{taskinstance.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskinstance.TaskTable,
			Columns: []string{taskinstance.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TaskInstanceUpdateOne is the builder for updating a single TaskInstance entity.
type TaskInstanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskInstanceMutation
}

// SetUpdateTime sets the "update_time" field.
func (tiuo *TaskInstanceUpdateOne) SetUpdateTime(t time.Time) *TaskInstanceUpdateOne {
	tiuo.mutation.SetUpdateTime(t)
	return tiuo
}

// SetStartTime sets the "start_time" field.
func (tiuo *TaskInstanceUpdateOne) SetStartTime(t time.Time) *TaskInstanceUpdateOne {
	tiuo.mutation.SetStartTime(t)
	return tiuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableStartTime(t *time.Time) *TaskInstanceUpdateOne {
	if t != nil {
		tiuo.SetStartTime(*t)
	}
	return tiuo
}

// SetEndTime sets the "end_time" field.
func (tiuo *TaskInstanceUpdateOne) SetEndTime(t time.Time) *TaskInstanceUpdateOne {
	tiuo.mutation.SetEndTime(t)
	return tiuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableEndTime(t *time.Time) *TaskInstanceUpdateOne {
	if t != nil {
		tiuo.SetEndTime(*t)
	}
	return tiuo
}

// ClearEndTime clears the value of the "end_time" field.
func (tiuo *TaskInstanceUpdateOne) ClearEndTime() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearEndTime()
	return tiuo
}

// SetSuccess sets the "success" field.
func (tiuo *TaskInstanceUpdateOne) SetSuccess(b bool) *TaskInstanceUpdateOne {
	tiuo.mutation.SetSuccess(b)
	return tiuo
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableSuccess(b *bool) *TaskInstanceUpdateOne {
	if b != nil {
		tiuo.SetSuccess(*b)
	}
	return tiuo
}

// ClearSuccess clears the value of the "success" field.
func (tiuo *TaskInstanceUpdateOne) ClearSuccess() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearSuccess()
	return tiuo
}

// SetRunning sets the "running" field.
func (tiuo *TaskInstanceUpdateOne) SetRunning(b bool) *TaskInstanceUpdateOne {
	tiuo.mutation.SetRunning(b)
	return tiuo
}

// SetNillableRunning sets the "running" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableRunning(b *bool) *TaskInstanceUpdateOne {
	if b != nil {
		tiuo.SetRunning(*b)
	}
	return tiuo
}

// SetError sets the "error" field.
func (tiuo *TaskInstanceUpdateOne) SetError(s string) *TaskInstanceUpdateOne {
	tiuo.mutation.SetError(s)
	return tiuo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableError(s *string) *TaskInstanceUpdateOne {
	if s != nil {
		tiuo.SetError(*s)
	}
	return tiuo
}

// ClearError clears the value of the "error" field.
func (tiuo *TaskInstanceUpdateOne) ClearError() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearError()
	return tiuo
}

// SetMeta sets the "meta" field.
func (tiuo *TaskInstanceUpdateOne) SetMeta(m map[string]interface{}) *TaskInstanceUpdateOne {
	tiuo.mutation.SetMeta(m)
	return tiuo
}

// ClearMeta clears the value of the "meta" field.
func (tiuo *TaskInstanceUpdateOne) ClearMeta() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearMeta()
	return tiuo
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (tiuo *TaskInstanceUpdateOne) AddItemIDs(ids ...int) *TaskInstanceUpdateOne {
	tiuo.mutation.AddItemIDs(ids...)
	return tiuo
}

// AddItems adds the "items" edges to the Item entity.
func (tiuo *TaskInstanceUpdateOne) AddItems(i ...*Item) *TaskInstanceUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tiuo.AddItemIDs(ids...)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (tiuo *TaskInstanceUpdateOne) SetTaskID(id int) *TaskInstanceUpdateOne {
	tiuo.mutation.SetTaskID(id)
	return tiuo
}

// SetTask sets the "task" edge to the Task entity.
func (tiuo *TaskInstanceUpdateOne) SetTask(t *Task) *TaskInstanceUpdateOne {
	return tiuo.SetTaskID(t.ID)
}

// Mutation returns the TaskInstanceMutation object of the builder.
func (tiuo *TaskInstanceUpdateOne) Mutation() *TaskInstanceMutation {
	return tiuo.mutation
}

// ClearItems clears all "items" edges to the Item entity.
func (tiuo *TaskInstanceUpdateOne) ClearItems() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearItems()
	return tiuo
}

// RemoveItemIDs removes the "items" edge to Item entities by IDs.
func (tiuo *TaskInstanceUpdateOne) RemoveItemIDs(ids ...int) *TaskInstanceUpdateOne {
	tiuo.mutation.RemoveItemIDs(ids...)
	return tiuo
}

// RemoveItems removes "items" edges to Item entities.
func (tiuo *TaskInstanceUpdateOne) RemoveItems(i ...*Item) *TaskInstanceUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tiuo.RemoveItemIDs(ids...)
}

// ClearTask clears the "task" edge to the Task entity.
func (tiuo *TaskInstanceUpdateOne) ClearTask() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearTask()
	return tiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tiuo *TaskInstanceUpdateOne) Select(field string, fields ...string) *TaskInstanceUpdateOne {
	tiuo.fields = append([]string{field}, fields...)
	return tiuo
}

// Save executes the query and returns the updated TaskInstance entity.
func (tiuo *TaskInstanceUpdateOne) Save(ctx context.Context) (*TaskInstance, error) {
	var (
		err  error
		node *TaskInstance
	)
	tiuo.defaults()
	if len(tiuo.hooks) == 0 {
		if err = tiuo.check(); err != nil {
			return nil, err
		}
		node, err = tiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tiuo.check(); err != nil {
				return nil, err
			}
			tiuo.mutation = mutation
			node, err = tiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tiuo.hooks) - 1; i >= 0; i-- {
			if tiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tiuo *TaskInstanceUpdateOne) SaveX(ctx context.Context) *TaskInstance {
	node, err := tiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tiuo *TaskInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := tiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiuo *TaskInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := tiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tiuo *TaskInstanceUpdateOne) defaults() {
	if _, ok := tiuo.mutation.UpdateTime(); !ok {
		v := taskinstance.UpdateDefaultUpdateTime()
		tiuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tiuo *TaskInstanceUpdateOne) check() error {
	if _, ok := tiuo.mutation.TaskID(); tiuo.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskInstance.task"`)
	}
	return nil
}

func (tiuo *TaskInstanceUpdateOne) sqlSave(ctx context.Context) (_node *TaskInstance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskinstance.Table,
			Columns: taskinstance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: taskinstance.FieldID,
			},
		},
	}
	id, ok := tiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskInstance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskinstance.FieldID)
		for _, f := range fields {
			if !taskinstance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taskinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskinstance.FieldUpdateTime,
		})
	}
	if value, ok := tiuo.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskinstance.FieldStartTime,
		})
	}
	if value, ok := tiuo.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskinstance.FieldEndTime,
		})
	}
	if tiuo.mutation.EndTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: taskinstance.FieldEndTime,
		})
	}
	if value, ok := tiuo.mutation.Success(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taskinstance.FieldSuccess,
		})
	}
	if tiuo.mutation.SuccessCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: taskinstance.FieldSuccess,
		})
	}
	if value, ok := tiuo.mutation.Running(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taskinstance.FieldRunning,
		})
	}
	if value, ok := tiuo.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taskinstance.FieldError,
		})
	}
	if tiuo.mutation.ErrorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: taskinstance.FieldError,
		})
	}
	if value, ok := tiuo.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: taskinstance.FieldMeta,
		})
	}
	if tiuo.mutation.MetaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: taskinstance.FieldMeta,
		})
	}
	if tiuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskinstance.ItemsTable,
			Columns: []string{taskinstance.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiuo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !tiuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskinstance.ItemsTable,
			Columns: []string{taskinstance.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiuo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskinstance.ItemsTable,
			Columns: []string{taskinstance.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tiuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskinstance.TaskTable,
			Columns: []string{taskinstance.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskinstance.TaskTable,
			Columns: []string{taskinstance.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskInstance{config: tiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
