// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/dimension"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/item"
)

// DimensionCreate is the builder for creating a Dimension entity.
type DimensionCreate struct {
	config
	mutation *DimensionMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (dc *DimensionCreate) SetCreateTime(t time.Time) *DimensionCreate {
	dc.mutation.SetCreateTime(t)
	return dc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (dc *DimensionCreate) SetNillableCreateTime(t *time.Time) *DimensionCreate {
	if t != nil {
		dc.SetCreateTime(*t)
	}
	return dc
}

// SetTitle sets the "title" field.
func (dc *DimensionCreate) SetTitle(s string) *DimensionCreate {
	dc.mutation.SetTitle(s)
	return dc
}

// SetValue sets the "value" field.
func (dc *DimensionCreate) SetValue(s string) *DimensionCreate {
	dc.mutation.SetValue(s)
	return dc
}

// SetDisplayTitle sets the "display_title" field.
func (dc *DimensionCreate) SetDisplayTitle(m map[string]string) *DimensionCreate {
	dc.mutation.SetDisplayTitle(m)
	return dc
}

// SetDisplayValue sets the "display_value" field.
func (dc *DimensionCreate) SetDisplayValue(m map[string]string) *DimensionCreate {
	dc.mutation.SetDisplayValue(m)
	return dc
}

// SetMeta sets the "meta" field.
func (dc *DimensionCreate) SetMeta(m map[string]interface{}) *DimensionCreate {
	dc.mutation.SetMeta(m)
	return dc
}

// AddItemIDs adds the "item" edge to the Item entity by IDs.
func (dc *DimensionCreate) AddItemIDs(ids ...int) *DimensionCreate {
	dc.mutation.AddItemIDs(ids...)
	return dc
}

// AddItem adds the "item" edges to the Item entity.
func (dc *DimensionCreate) AddItem(i ...*Item) *DimensionCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return dc.AddItemIDs(ids...)
}

// Mutation returns the DimensionMutation object of the builder.
func (dc *DimensionCreate) Mutation() *DimensionMutation {
	return dc.mutation
}

// Save creates the Dimension in the database.
func (dc *DimensionCreate) Save(ctx context.Context) (*Dimension, error) {
	var (
		err  error
		node *Dimension
	)
	dc.defaults()
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DimensionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			if node, err = dc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			if dc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DimensionCreate) SaveX(ctx context.Context) *Dimension {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DimensionCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DimensionCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DimensionCreate) defaults() {
	if _, ok := dc.mutation.CreateTime(); !ok {
		v := dimension.DefaultCreateTime()
		dc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DimensionCreate) check() error {
	if _, ok := dc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Dimension.create_time"`)}
	}
	if _, ok := dc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Dimension.title"`)}
	}
	if v, ok := dc.mutation.Title(); ok {
		if err := dimension.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Dimension.title": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Dimension.value"`)}
	}
	if v, ok := dc.mutation.Value(); ok {
		if err := dimension.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Dimension.value": %w`, err)}
		}
	}
	return nil
}

func (dc *DimensionCreate) sqlSave(ctx context.Context) (*Dimension, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dc *DimensionCreate) createSpec() (*Dimension, *sqlgraph.CreateSpec) {
	var (
		_node = &Dimension{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dimension.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dimension.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dimension.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := dc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dimension.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := dc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dimension.FieldValue,
		})
		_node.Value = value
	}
	if value, ok := dc.mutation.DisplayTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: dimension.FieldDisplayTitle,
		})
		_node.DisplayTitle = value
	}
	if value, ok := dc.mutation.DisplayValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: dimension.FieldDisplayValue,
		})
		_node.DisplayValue = value
	}
	if value, ok := dc.mutation.Meta(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: dimension.FieldMeta,
		})
		_node.Meta = value
	}
	if nodes := dc.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dimension.ItemTable,
			Columns: dimension.ItemPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DimensionCreateBulk is the builder for creating many Dimension entities in bulk.
type DimensionCreateBulk struct {
	config
	builders []*DimensionCreate
}

// Save creates the Dimension entities in the database.
func (dcb *DimensionCreateBulk) Save(ctx context.Context) ([]*Dimension, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Dimension, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DimensionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DimensionCreateBulk) SaveX(ctx context.Context) []*Dimension {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DimensionCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DimensionCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
