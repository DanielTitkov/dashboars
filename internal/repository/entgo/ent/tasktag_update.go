// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/task"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/tasktag"
)

// TaskTagUpdate is the builder for updating TaskTag entities.
type TaskTagUpdate struct {
	config
	hooks    []Hook
	mutation *TaskTagMutation
}

// Where appends a list predicates to the TaskTagUpdate builder.
func (ttu *TaskTagUpdate) Where(ps ...predicate.TaskTag) *TaskTagUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetUpdateTime sets the "update_time" field.
func (ttu *TaskTagUpdate) SetUpdateTime(t time.Time) *TaskTagUpdate {
	ttu.mutation.SetUpdateTime(t)
	return ttu
}

// SetTitle sets the "title" field.
func (ttu *TaskTagUpdate) SetTitle(s string) *TaskTagUpdate {
	ttu.mutation.SetTitle(s)
	return ttu
}

// SetDescription sets the "description" field.
func (ttu *TaskTagUpdate) SetDescription(s string) *TaskTagUpdate {
	ttu.mutation.SetDescription(s)
	return ttu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ttu *TaskTagUpdate) SetNillableDescription(s *string) *TaskTagUpdate {
	if s != nil {
		ttu.SetDescription(*s)
	}
	return ttu
}

// ClearDescription clears the value of the "description" field.
func (ttu *TaskTagUpdate) ClearDescription() *TaskTagUpdate {
	ttu.mutation.ClearDescription()
	return ttu
}

// SetDisplay sets the "display" field.
func (ttu *TaskTagUpdate) SetDisplay(b bool) *TaskTagUpdate {
	ttu.mutation.SetDisplay(b)
	return ttu
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (ttu *TaskTagUpdate) SetNillableDisplay(b *bool) *TaskTagUpdate {
	if b != nil {
		ttu.SetDisplay(*b)
	}
	return ttu
}

// SetMeta sets the "meta" field.
func (ttu *TaskTagUpdate) SetMeta(m map[string]interface{}) *TaskTagUpdate {
	ttu.mutation.SetMeta(m)
	return ttu
}

// ClearMeta clears the value of the "meta" field.
func (ttu *TaskTagUpdate) ClearMeta() *TaskTagUpdate {
	ttu.mutation.ClearMeta()
	return ttu
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (ttu *TaskTagUpdate) AddTaskIDs(ids ...int) *TaskTagUpdate {
	ttu.mutation.AddTaskIDs(ids...)
	return ttu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (ttu *TaskTagUpdate) AddTasks(t ...*Task) *TaskTagUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.AddTaskIDs(ids...)
}

// Mutation returns the TaskTagMutation object of the builder.
func (ttu *TaskTagUpdate) Mutation() *TaskTagMutation {
	return ttu.mutation
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (ttu *TaskTagUpdate) ClearTasks() *TaskTagUpdate {
	ttu.mutation.ClearTasks()
	return ttu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (ttu *TaskTagUpdate) RemoveTaskIDs(ids ...int) *TaskTagUpdate {
	ttu.mutation.RemoveTaskIDs(ids...)
	return ttu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (ttu *TaskTagUpdate) RemoveTasks(t ...*Task) *TaskTagUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TaskTagUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ttu.defaults()
	if len(ttu.hooks) == 0 {
		if err = ttu.check(); err != nil {
			return 0, err
		}
		affected, err = ttu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskTagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttu.check(); err != nil {
				return 0, err
			}
			ttu.mutation = mutation
			affected, err = ttu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ttu.hooks) - 1; i >= 0; i-- {
			if ttu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TaskTagUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TaskTagUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TaskTagUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttu *TaskTagUpdate) defaults() {
	if _, ok := ttu.mutation.UpdateTime(); !ok {
		v := tasktag.UpdateDefaultUpdateTime()
		ttu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttu *TaskTagUpdate) check() error {
	if v, ok := ttu.mutation.Title(); ok {
		if err := tasktag.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "TaskTag.title": %w`, err)}
		}
	}
	if v, ok := ttu.mutation.Description(); ok {
		if err := tasktag.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "TaskTag.description": %w`, err)}
		}
	}
	return nil
}

func (ttu *TaskTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tasktag.Table,
			Columns: tasktag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tasktag.FieldID,
			},
		},
	}
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasktag.FieldUpdateTime,
		})
	}
	if value, ok := ttu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasktag.FieldTitle,
		})
	}
	if value, ok := ttu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasktag.FieldDescription,
		})
	}
	if ttu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tasktag.FieldDescription,
		})
	}
	if value, ok := ttu.mutation.Display(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tasktag.FieldDisplay,
		})
	}
	if value, ok := ttu.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: tasktag.FieldMeta,
		})
	}
	if ttu.mutation.MetaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: tasktag.FieldMeta,
		})
	}
	if ttu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tasktag.TasksTable,
			Columns: tasktag.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !ttu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tasktag.TasksTable,
			Columns: tasktag.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tasktag.TasksTable,
			Columns: tasktag.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasktag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TaskTagUpdateOne is the builder for updating a single TaskTag entity.
type TaskTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskTagMutation
}

// SetUpdateTime sets the "update_time" field.
func (ttuo *TaskTagUpdateOne) SetUpdateTime(t time.Time) *TaskTagUpdateOne {
	ttuo.mutation.SetUpdateTime(t)
	return ttuo
}

// SetTitle sets the "title" field.
func (ttuo *TaskTagUpdateOne) SetTitle(s string) *TaskTagUpdateOne {
	ttuo.mutation.SetTitle(s)
	return ttuo
}

// SetDescription sets the "description" field.
func (ttuo *TaskTagUpdateOne) SetDescription(s string) *TaskTagUpdateOne {
	ttuo.mutation.SetDescription(s)
	return ttuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ttuo *TaskTagUpdateOne) SetNillableDescription(s *string) *TaskTagUpdateOne {
	if s != nil {
		ttuo.SetDescription(*s)
	}
	return ttuo
}

// ClearDescription clears the value of the "description" field.
func (ttuo *TaskTagUpdateOne) ClearDescription() *TaskTagUpdateOne {
	ttuo.mutation.ClearDescription()
	return ttuo
}

// SetDisplay sets the "display" field.
func (ttuo *TaskTagUpdateOne) SetDisplay(b bool) *TaskTagUpdateOne {
	ttuo.mutation.SetDisplay(b)
	return ttuo
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (ttuo *TaskTagUpdateOne) SetNillableDisplay(b *bool) *TaskTagUpdateOne {
	if b != nil {
		ttuo.SetDisplay(*b)
	}
	return ttuo
}

// SetMeta sets the "meta" field.
func (ttuo *TaskTagUpdateOne) SetMeta(m map[string]interface{}) *TaskTagUpdateOne {
	ttuo.mutation.SetMeta(m)
	return ttuo
}

// ClearMeta clears the value of the "meta" field.
func (ttuo *TaskTagUpdateOne) ClearMeta() *TaskTagUpdateOne {
	ttuo.mutation.ClearMeta()
	return ttuo
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (ttuo *TaskTagUpdateOne) AddTaskIDs(ids ...int) *TaskTagUpdateOne {
	ttuo.mutation.AddTaskIDs(ids...)
	return ttuo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (ttuo *TaskTagUpdateOne) AddTasks(t ...*Task) *TaskTagUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.AddTaskIDs(ids...)
}

// Mutation returns the TaskTagMutation object of the builder.
func (ttuo *TaskTagUpdateOne) Mutation() *TaskTagMutation {
	return ttuo.mutation
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (ttuo *TaskTagUpdateOne) ClearTasks() *TaskTagUpdateOne {
	ttuo.mutation.ClearTasks()
	return ttuo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (ttuo *TaskTagUpdateOne) RemoveTaskIDs(ids ...int) *TaskTagUpdateOne {
	ttuo.mutation.RemoveTaskIDs(ids...)
	return ttuo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (ttuo *TaskTagUpdateOne) RemoveTasks(t ...*Task) *TaskTagUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.RemoveTaskIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TaskTagUpdateOne) Select(field string, fields ...string) *TaskTagUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TaskTag entity.
func (ttuo *TaskTagUpdateOne) Save(ctx context.Context) (*TaskTag, error) {
	var (
		err  error
		node *TaskTag
	)
	ttuo.defaults()
	if len(ttuo.hooks) == 0 {
		if err = ttuo.check(); err != nil {
			return nil, err
		}
		node, err = ttuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskTagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttuo.check(); err != nil {
				return nil, err
			}
			ttuo.mutation = mutation
			node, err = ttuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ttuo.hooks) - 1; i >= 0; i-- {
			if ttuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TaskTagUpdateOne) SaveX(ctx context.Context) *TaskTag {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TaskTagUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TaskTagUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttuo *TaskTagUpdateOne) defaults() {
	if _, ok := ttuo.mutation.UpdateTime(); !ok {
		v := tasktag.UpdateDefaultUpdateTime()
		ttuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttuo *TaskTagUpdateOne) check() error {
	if v, ok := ttuo.mutation.Title(); ok {
		if err := tasktag.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "TaskTag.title": %w`, err)}
		}
	}
	if v, ok := ttuo.mutation.Description(); ok {
		if err := tasktag.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "TaskTag.description": %w`, err)}
		}
	}
	return nil
}

func (ttuo *TaskTagUpdateOne) sqlSave(ctx context.Context) (_node *TaskTag, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tasktag.Table,
			Columns: tasktag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tasktag.FieldID,
			},
		},
	}
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tasktag.FieldID)
		for _, f := range fields {
			if !tasktag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tasktag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasktag.FieldUpdateTime,
		})
	}
	if value, ok := ttuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasktag.FieldTitle,
		})
	}
	if value, ok := ttuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasktag.FieldDescription,
		})
	}
	if ttuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tasktag.FieldDescription,
		})
	}
	if value, ok := ttuo.mutation.Display(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tasktag.FieldDisplay,
		})
	}
	if value, ok := ttuo.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: tasktag.FieldMeta,
		})
	}
	if ttuo.mutation.MetaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: tasktag.FieldMeta,
		})
	}
	if ttuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tasktag.TasksTable,
			Columns: tasktag.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !ttuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tasktag.TasksTable,
			Columns: tasktag.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tasktag.TasksTable,
			Columns: tasktag.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskTag{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasktag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
