// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/task"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/taskcategory"
)

// TaskCategoryCreate is the builder for creating a TaskCategory entity.
type TaskCategoryCreate struct {
	config
	mutation *TaskCategoryMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (tcc *TaskCategoryCreate) SetCreateTime(t time.Time) *TaskCategoryCreate {
	tcc.mutation.SetCreateTime(t)
	return tcc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tcc *TaskCategoryCreate) SetNillableCreateTime(t *time.Time) *TaskCategoryCreate {
	if t != nil {
		tcc.SetCreateTime(*t)
	}
	return tcc
}

// SetUpdateTime sets the "update_time" field.
func (tcc *TaskCategoryCreate) SetUpdateTime(t time.Time) *TaskCategoryCreate {
	tcc.mutation.SetUpdateTime(t)
	return tcc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tcc *TaskCategoryCreate) SetNillableUpdateTime(t *time.Time) *TaskCategoryCreate {
	if t != nil {
		tcc.SetUpdateTime(*t)
	}
	return tcc
}

// SetTitle sets the "title" field.
func (tcc *TaskCategoryCreate) SetTitle(s string) *TaskCategoryCreate {
	tcc.mutation.SetTitle(s)
	return tcc
}

// SetDescription sets the "description" field.
func (tcc *TaskCategoryCreate) SetDescription(s string) *TaskCategoryCreate {
	tcc.mutation.SetDescription(s)
	return tcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tcc *TaskCategoryCreate) SetNillableDescription(s *string) *TaskCategoryCreate {
	if s != nil {
		tcc.SetDescription(*s)
	}
	return tcc
}

// SetDisplay sets the "display" field.
func (tcc *TaskCategoryCreate) SetDisplay(b bool) *TaskCategoryCreate {
	tcc.mutation.SetDisplay(b)
	return tcc
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (tcc *TaskCategoryCreate) SetNillableDisplay(b *bool) *TaskCategoryCreate {
	if b != nil {
		tcc.SetDisplay(*b)
	}
	return tcc
}

// SetMeta sets the "meta" field.
func (tcc *TaskCategoryCreate) SetMeta(m map[string]interface{}) *TaskCategoryCreate {
	tcc.mutation.SetMeta(m)
	return tcc
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (tcc *TaskCategoryCreate) AddTaskIDs(ids ...int) *TaskCategoryCreate {
	tcc.mutation.AddTaskIDs(ids...)
	return tcc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (tcc *TaskCategoryCreate) AddTasks(t ...*Task) *TaskCategoryCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcc.AddTaskIDs(ids...)
}

// Mutation returns the TaskCategoryMutation object of the builder.
func (tcc *TaskCategoryCreate) Mutation() *TaskCategoryMutation {
	return tcc.mutation
}

// Save creates the TaskCategory in the database.
func (tcc *TaskCategoryCreate) Save(ctx context.Context) (*TaskCategory, error) {
	var (
		err  error
		node *TaskCategory
	)
	tcc.defaults()
	if len(tcc.hooks) == 0 {
		if err = tcc.check(); err != nil {
			return nil, err
		}
		node, err = tcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tcc.check(); err != nil {
				return nil, err
			}
			tcc.mutation = mutation
			if node, err = tcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tcc.hooks) - 1; i >= 0; i-- {
			if tcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TaskCategoryCreate) SaveX(ctx context.Context) *TaskCategory {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TaskCategoryCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TaskCategoryCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TaskCategoryCreate) defaults() {
	if _, ok := tcc.mutation.CreateTime(); !ok {
		v := taskcategory.DefaultCreateTime()
		tcc.mutation.SetCreateTime(v)
	}
	if _, ok := tcc.mutation.UpdateTime(); !ok {
		v := taskcategory.DefaultUpdateTime()
		tcc.mutation.SetUpdateTime(v)
	}
	if _, ok := tcc.mutation.Display(); !ok {
		v := taskcategory.DefaultDisplay
		tcc.mutation.SetDisplay(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TaskCategoryCreate) check() error {
	if _, ok := tcc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TaskCategory.create_time"`)}
	}
	if _, ok := tcc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TaskCategory.update_time"`)}
	}
	if _, ok := tcc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "TaskCategory.title"`)}
	}
	if v, ok := tcc.mutation.Title(); ok {
		if err := taskcategory.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "TaskCategory.title": %w`, err)}
		}
	}
	if v, ok := tcc.mutation.Description(); ok {
		if err := taskcategory.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "TaskCategory.description": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.Display(); !ok {
		return &ValidationError{Name: "display", err: errors.New(`ent: missing required field "TaskCategory.display"`)}
	}
	return nil
}

func (tcc *TaskCategoryCreate) sqlSave(ctx context.Context) (*TaskCategory, error) {
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tcc *TaskCategoryCreate) createSpec() (*TaskCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskCategory{config: tcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: taskcategory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: taskcategory.FieldID,
			},
		}
	)
	if value, ok := tcc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskcategory.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := tcc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskcategory.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := tcc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taskcategory.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := tcc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taskcategory.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := tcc.mutation.Display(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taskcategory.FieldDisplay,
		})
		_node.Display = value
	}
	if value, ok := tcc.mutation.Meta(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: taskcategory.FieldMeta,
		})
		_node.Meta = value
	}
	if nodes := tcc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskcategory.TasksTable,
			Columns: []string{taskcategory.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskCategoryCreateBulk is the builder for creating many TaskCategory entities in bulk.
type TaskCategoryCreateBulk struct {
	config
	builders []*TaskCategoryCreate
}

// Save creates the TaskCategory entities in the database.
func (tccb *TaskCategoryCreateBulk) Save(ctx context.Context) ([]*TaskCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TaskCategory, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TaskCategoryCreateBulk) SaveX(ctx context.Context) []*TaskCategory {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TaskCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TaskCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}
