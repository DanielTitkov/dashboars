// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/item"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/task"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/taskinstance"
)

// TaskInstanceCreate is the builder for creating a TaskInstance entity.
type TaskInstanceCreate struct {
	config
	mutation *TaskInstanceMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (tic *TaskInstanceCreate) SetCreateTime(t time.Time) *TaskInstanceCreate {
	tic.mutation.SetCreateTime(t)
	return tic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableCreateTime(t *time.Time) *TaskInstanceCreate {
	if t != nil {
		tic.SetCreateTime(*t)
	}
	return tic
}

// SetUpdateTime sets the "update_time" field.
func (tic *TaskInstanceCreate) SetUpdateTime(t time.Time) *TaskInstanceCreate {
	tic.mutation.SetUpdateTime(t)
	return tic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableUpdateTime(t *time.Time) *TaskInstanceCreate {
	if t != nil {
		tic.SetUpdateTime(*t)
	}
	return tic
}

// SetStartTime sets the "start_time" field.
func (tic *TaskInstanceCreate) SetStartTime(t time.Time) *TaskInstanceCreate {
	tic.mutation.SetStartTime(t)
	return tic
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableStartTime(t *time.Time) *TaskInstanceCreate {
	if t != nil {
		tic.SetStartTime(*t)
	}
	return tic
}

// SetEndTime sets the "end_time" field.
func (tic *TaskInstanceCreate) SetEndTime(t time.Time) *TaskInstanceCreate {
	tic.mutation.SetEndTime(t)
	return tic
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableEndTime(t *time.Time) *TaskInstanceCreate {
	if t != nil {
		tic.SetEndTime(*t)
	}
	return tic
}

// SetAttempt sets the "attempt" field.
func (tic *TaskInstanceCreate) SetAttempt(i int) *TaskInstanceCreate {
	tic.mutation.SetAttempt(i)
	return tic
}

// SetNillableAttempt sets the "attempt" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableAttempt(i *int) *TaskInstanceCreate {
	if i != nil {
		tic.SetAttempt(*i)
	}
	return tic
}

// SetSuccess sets the "success" field.
func (tic *TaskInstanceCreate) SetSuccess(b bool) *TaskInstanceCreate {
	tic.mutation.SetSuccess(b)
	return tic
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableSuccess(b *bool) *TaskInstanceCreate {
	if b != nil {
		tic.SetSuccess(*b)
	}
	return tic
}

// SetRunning sets the "running" field.
func (tic *TaskInstanceCreate) SetRunning(b bool) *TaskInstanceCreate {
	tic.mutation.SetRunning(b)
	return tic
}

// SetNillableRunning sets the "running" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableRunning(b *bool) *TaskInstanceCreate {
	if b != nil {
		tic.SetRunning(*b)
	}
	return tic
}

// SetError sets the "error" field.
func (tic *TaskInstanceCreate) SetError(s string) *TaskInstanceCreate {
	tic.mutation.SetError(s)
	return tic
}

// SetNillableError sets the "error" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableError(s *string) *TaskInstanceCreate {
	if s != nil {
		tic.SetError(*s)
	}
	return tic
}

// SetMeta sets the "meta" field.
func (tic *TaskInstanceCreate) SetMeta(m map[string]interface{}) *TaskInstanceCreate {
	tic.mutation.SetMeta(m)
	return tic
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (tic *TaskInstanceCreate) AddItemIDs(ids ...int) *TaskInstanceCreate {
	tic.mutation.AddItemIDs(ids...)
	return tic
}

// AddItems adds the "items" edges to the Item entity.
func (tic *TaskInstanceCreate) AddItems(i ...*Item) *TaskInstanceCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tic.AddItemIDs(ids...)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (tic *TaskInstanceCreate) SetTaskID(id int) *TaskInstanceCreate {
	tic.mutation.SetTaskID(id)
	return tic
}

// SetTask sets the "task" edge to the Task entity.
func (tic *TaskInstanceCreate) SetTask(t *Task) *TaskInstanceCreate {
	return tic.SetTaskID(t.ID)
}

// Mutation returns the TaskInstanceMutation object of the builder.
func (tic *TaskInstanceCreate) Mutation() *TaskInstanceMutation {
	return tic.mutation
}

// Save creates the TaskInstance in the database.
func (tic *TaskInstanceCreate) Save(ctx context.Context) (*TaskInstance, error) {
	var (
		err  error
		node *TaskInstance
	)
	tic.defaults()
	if len(tic.hooks) == 0 {
		if err = tic.check(); err != nil {
			return nil, err
		}
		node, err = tic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tic.check(); err != nil {
				return nil, err
			}
			tic.mutation = mutation
			if node, err = tic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tic.hooks) - 1; i >= 0; i-- {
			if tic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tic *TaskInstanceCreate) SaveX(ctx context.Context) *TaskInstance {
	v, err := tic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tic *TaskInstanceCreate) Exec(ctx context.Context) error {
	_, err := tic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tic *TaskInstanceCreate) ExecX(ctx context.Context) {
	if err := tic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tic *TaskInstanceCreate) defaults() {
	if _, ok := tic.mutation.CreateTime(); !ok {
		v := taskinstance.DefaultCreateTime()
		tic.mutation.SetCreateTime(v)
	}
	if _, ok := tic.mutation.UpdateTime(); !ok {
		v := taskinstance.DefaultUpdateTime()
		tic.mutation.SetUpdateTime(v)
	}
	if _, ok := tic.mutation.StartTime(); !ok {
		v := taskinstance.DefaultStartTime()
		tic.mutation.SetStartTime(v)
	}
	if _, ok := tic.mutation.Attempt(); !ok {
		v := taskinstance.DefaultAttempt
		tic.mutation.SetAttempt(v)
	}
	if _, ok := tic.mutation.Running(); !ok {
		v := taskinstance.DefaultRunning
		tic.mutation.SetRunning(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tic *TaskInstanceCreate) check() error {
	if _, ok := tic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TaskInstance.create_time"`)}
	}
	if _, ok := tic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TaskInstance.update_time"`)}
	}
	if _, ok := tic.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "TaskInstance.start_time"`)}
	}
	if _, ok := tic.mutation.Attempt(); !ok {
		return &ValidationError{Name: "attempt", err: errors.New(`ent: missing required field "TaskInstance.attempt"`)}
	}
	if _, ok := tic.mutation.Running(); !ok {
		return &ValidationError{Name: "running", err: errors.New(`ent: missing required field "TaskInstance.running"`)}
	}
	if _, ok := tic.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task", err: errors.New(`ent: missing required edge "TaskInstance.task"`)}
	}
	return nil
}

func (tic *TaskInstanceCreate) sqlSave(ctx context.Context) (*TaskInstance, error) {
	_node, _spec := tic.createSpec()
	if err := sqlgraph.CreateNode(ctx, tic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tic *TaskInstanceCreate) createSpec() (*TaskInstance, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskInstance{config: tic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: taskinstance.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: taskinstance.FieldID,
			},
		}
	)
	if value, ok := tic.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskinstance.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := tic.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskinstance.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := tic.mutation.StartTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskinstance.FieldStartTime,
		})
		_node.StartTime = value
	}
	if value, ok := tic.mutation.EndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskinstance.FieldEndTime,
		})
		_node.EndTime = value
	}
	if value, ok := tic.mutation.Attempt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: taskinstance.FieldAttempt,
		})
		_node.Attempt = value
	}
	if value, ok := tic.mutation.Success(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taskinstance.FieldSuccess,
		})
		_node.Success = &value
	}
	if value, ok := tic.mutation.Running(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taskinstance.FieldRunning,
		})
		_node.Running = value
	}
	if value, ok := tic.mutation.Error(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taskinstance.FieldError,
		})
		_node.Error = &value
	}
	if value, ok := tic.mutation.Meta(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: taskinstance.FieldMeta,
		})
		_node.Meta = value
	}
	if nodes := tic.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskinstance.ItemsTable,
			Columns: []string{taskinstance.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tic.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskinstance.TaskTable,
			Columns: []string{taskinstance.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.task_instances = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskInstanceCreateBulk is the builder for creating many TaskInstance entities in bulk.
type TaskInstanceCreateBulk struct {
	config
	builders []*TaskInstanceCreate
}

// Save creates the TaskInstance entities in the database.
func (ticb *TaskInstanceCreateBulk) Save(ctx context.Context) ([]*TaskInstance, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ticb.builders))
	nodes := make([]*TaskInstance, len(ticb.builders))
	mutators := make([]Mutator, len(ticb.builders))
	for i := range ticb.builders {
		func(i int, root context.Context) {
			builder := ticb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskInstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ticb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ticb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ticb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ticb *TaskInstanceCreateBulk) SaveX(ctx context.Context) []*TaskInstance {
	v, err := ticb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ticb *TaskInstanceCreateBulk) Exec(ctx context.Context) error {
	_, err := ticb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ticb *TaskInstanceCreateBulk) ExecX(ctx context.Context) {
	if err := ticb.Exec(ctx); err != nil {
		panic(err)
	}
}
