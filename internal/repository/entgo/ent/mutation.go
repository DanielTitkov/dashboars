// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/dimension"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/item"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/metric"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/task"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/taskcategory"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/taskinstance"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/tasktag"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDimension    = "Dimension"
	TypeItem         = "Item"
	TypeMetric       = "Metric"
	TypeTask         = "Task"
	TypeTaskCategory = "TaskCategory"
	TypeTaskInstance = "TaskInstance"
	TypeTaskTag      = "TaskTag"
)

// DimensionMutation represents an operation that mutates the Dimension nodes in the graph.
type DimensionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	title         *string
	value         *string
	display_title *map[string]string
	display_value *map[string]string
	meta          *map[string]interface{}
	clearedFields map[string]struct{}
	item          map[int]struct{}
	removeditem   map[int]struct{}
	cleareditem   bool
	done          bool
	oldValue      func(context.Context) (*Dimension, error)
	predicates    []predicate.Dimension
}

var _ ent.Mutation = (*DimensionMutation)(nil)

// dimensionOption allows management of the mutation configuration using functional options.
type dimensionOption func(*DimensionMutation)

// newDimensionMutation creates new mutation for the Dimension entity.
func newDimensionMutation(c config, op Op, opts ...dimensionOption) *DimensionMutation {
	m := &DimensionMutation{
		config:        c,
		op:            op,
		typ:           TypeDimension,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDimensionID sets the ID field of the mutation.
func withDimensionID(id int) dimensionOption {
	return func(m *DimensionMutation) {
		var (
			err   error
			once  sync.Once
			value *Dimension
		)
		m.oldValue = func(ctx context.Context) (*Dimension, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Dimension.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDimension sets the old Dimension of the mutation.
func withDimension(node *Dimension) dimensionOption {
	return func(m *DimensionMutation) {
		m.oldValue = func(context.Context) (*Dimension, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DimensionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DimensionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DimensionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DimensionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Dimension.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *DimensionMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DimensionMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Dimension entity.
// If the Dimension object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DimensionMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DimensionMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetTitle sets the "title" field.
func (m *DimensionMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *DimensionMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Dimension entity.
// If the Dimension object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DimensionMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *DimensionMutation) ResetTitle() {
	m.title = nil
}

// SetValue sets the "value" field.
func (m *DimensionMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *DimensionMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Dimension entity.
// If the Dimension object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DimensionMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *DimensionMutation) ResetValue() {
	m.value = nil
}

// SetDisplayTitle sets the "display_title" field.
func (m *DimensionMutation) SetDisplayTitle(value map[string]string) {
	m.display_title = &value
}

// DisplayTitle returns the value of the "display_title" field in the mutation.
func (m *DimensionMutation) DisplayTitle() (r map[string]string, exists bool) {
	v := m.display_title
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayTitle returns the old "display_title" field's value of the Dimension entity.
// If the Dimension object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DimensionMutation) OldDisplayTitle(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayTitle: %w", err)
	}
	return oldValue.DisplayTitle, nil
}

// ClearDisplayTitle clears the value of the "display_title" field.
func (m *DimensionMutation) ClearDisplayTitle() {
	m.display_title = nil
	m.clearedFields[dimension.FieldDisplayTitle] = struct{}{}
}

// DisplayTitleCleared returns if the "display_title" field was cleared in this mutation.
func (m *DimensionMutation) DisplayTitleCleared() bool {
	_, ok := m.clearedFields[dimension.FieldDisplayTitle]
	return ok
}

// ResetDisplayTitle resets all changes to the "display_title" field.
func (m *DimensionMutation) ResetDisplayTitle() {
	m.display_title = nil
	delete(m.clearedFields, dimension.FieldDisplayTitle)
}

// SetDisplayValue sets the "display_value" field.
func (m *DimensionMutation) SetDisplayValue(value map[string]string) {
	m.display_value = &value
}

// DisplayValue returns the value of the "display_value" field in the mutation.
func (m *DimensionMutation) DisplayValue() (r map[string]string, exists bool) {
	v := m.display_value
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayValue returns the old "display_value" field's value of the Dimension entity.
// If the Dimension object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DimensionMutation) OldDisplayValue(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayValue: %w", err)
	}
	return oldValue.DisplayValue, nil
}

// ClearDisplayValue clears the value of the "display_value" field.
func (m *DimensionMutation) ClearDisplayValue() {
	m.display_value = nil
	m.clearedFields[dimension.FieldDisplayValue] = struct{}{}
}

// DisplayValueCleared returns if the "display_value" field was cleared in this mutation.
func (m *DimensionMutation) DisplayValueCleared() bool {
	_, ok := m.clearedFields[dimension.FieldDisplayValue]
	return ok
}

// ResetDisplayValue resets all changes to the "display_value" field.
func (m *DimensionMutation) ResetDisplayValue() {
	m.display_value = nil
	delete(m.clearedFields, dimension.FieldDisplayValue)
}

// SetMeta sets the "meta" field.
func (m *DimensionMutation) SetMeta(value map[string]interface{}) {
	m.meta = &value
}

// Meta returns the value of the "meta" field in the mutation.
func (m *DimensionMutation) Meta() (r map[string]interface{}, exists bool) {
	v := m.meta
	if v == nil {
		return
	}
	return *v, true
}

// OldMeta returns the old "meta" field's value of the Dimension entity.
// If the Dimension object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DimensionMutation) OldMeta(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeta is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeta: %w", err)
	}
	return oldValue.Meta, nil
}

// ClearMeta clears the value of the "meta" field.
func (m *DimensionMutation) ClearMeta() {
	m.meta = nil
	m.clearedFields[dimension.FieldMeta] = struct{}{}
}

// MetaCleared returns if the "meta" field was cleared in this mutation.
func (m *DimensionMutation) MetaCleared() bool {
	_, ok := m.clearedFields[dimension.FieldMeta]
	return ok
}

// ResetMeta resets all changes to the "meta" field.
func (m *DimensionMutation) ResetMeta() {
	m.meta = nil
	delete(m.clearedFields, dimension.FieldMeta)
}

// AddItemIDs adds the "item" edge to the Item entity by ids.
func (m *DimensionMutation) AddItemIDs(ids ...int) {
	if m.item == nil {
		m.item = make(map[int]struct{})
	}
	for i := range ids {
		m.item[ids[i]] = struct{}{}
	}
}

// ClearItem clears the "item" edge to the Item entity.
func (m *DimensionMutation) ClearItem() {
	m.cleareditem = true
}

// ItemCleared reports if the "item" edge to the Item entity was cleared.
func (m *DimensionMutation) ItemCleared() bool {
	return m.cleareditem
}

// RemoveItemIDs removes the "item" edge to the Item entity by IDs.
func (m *DimensionMutation) RemoveItemIDs(ids ...int) {
	if m.removeditem == nil {
		m.removeditem = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.item, ids[i])
		m.removeditem[ids[i]] = struct{}{}
	}
}

// RemovedItem returns the removed IDs of the "item" edge to the Item entity.
func (m *DimensionMutation) RemovedItemIDs() (ids []int) {
	for id := range m.removeditem {
		ids = append(ids, id)
	}
	return
}

// ItemIDs returns the "item" edge IDs in the mutation.
func (m *DimensionMutation) ItemIDs() (ids []int) {
	for id := range m.item {
		ids = append(ids, id)
	}
	return
}

// ResetItem resets all changes to the "item" edge.
func (m *DimensionMutation) ResetItem() {
	m.item = nil
	m.cleareditem = false
	m.removeditem = nil
}

// Where appends a list predicates to the DimensionMutation builder.
func (m *DimensionMutation) Where(ps ...predicate.Dimension) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DimensionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Dimension).
func (m *DimensionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DimensionMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, dimension.FieldCreateTime)
	}
	if m.title != nil {
		fields = append(fields, dimension.FieldTitle)
	}
	if m.value != nil {
		fields = append(fields, dimension.FieldValue)
	}
	if m.display_title != nil {
		fields = append(fields, dimension.FieldDisplayTitle)
	}
	if m.display_value != nil {
		fields = append(fields, dimension.FieldDisplayValue)
	}
	if m.meta != nil {
		fields = append(fields, dimension.FieldMeta)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DimensionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dimension.FieldCreateTime:
		return m.CreateTime()
	case dimension.FieldTitle:
		return m.Title()
	case dimension.FieldValue:
		return m.Value()
	case dimension.FieldDisplayTitle:
		return m.DisplayTitle()
	case dimension.FieldDisplayValue:
		return m.DisplayValue()
	case dimension.FieldMeta:
		return m.Meta()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DimensionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dimension.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case dimension.FieldTitle:
		return m.OldTitle(ctx)
	case dimension.FieldValue:
		return m.OldValue(ctx)
	case dimension.FieldDisplayTitle:
		return m.OldDisplayTitle(ctx)
	case dimension.FieldDisplayValue:
		return m.OldDisplayValue(ctx)
	case dimension.FieldMeta:
		return m.OldMeta(ctx)
	}
	return nil, fmt.Errorf("unknown Dimension field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DimensionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dimension.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case dimension.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case dimension.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case dimension.FieldDisplayTitle:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayTitle(v)
		return nil
	case dimension.FieldDisplayValue:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayValue(v)
		return nil
	case dimension.FieldMeta:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeta(v)
		return nil
	}
	return fmt.Errorf("unknown Dimension field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DimensionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DimensionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DimensionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Dimension numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DimensionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(dimension.FieldDisplayTitle) {
		fields = append(fields, dimension.FieldDisplayTitle)
	}
	if m.FieldCleared(dimension.FieldDisplayValue) {
		fields = append(fields, dimension.FieldDisplayValue)
	}
	if m.FieldCleared(dimension.FieldMeta) {
		fields = append(fields, dimension.FieldMeta)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DimensionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DimensionMutation) ClearField(name string) error {
	switch name {
	case dimension.FieldDisplayTitle:
		m.ClearDisplayTitle()
		return nil
	case dimension.FieldDisplayValue:
		m.ClearDisplayValue()
		return nil
	case dimension.FieldMeta:
		m.ClearMeta()
		return nil
	}
	return fmt.Errorf("unknown Dimension nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DimensionMutation) ResetField(name string) error {
	switch name {
	case dimension.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case dimension.FieldTitle:
		m.ResetTitle()
		return nil
	case dimension.FieldValue:
		m.ResetValue()
		return nil
	case dimension.FieldDisplayTitle:
		m.ResetDisplayTitle()
		return nil
	case dimension.FieldDisplayValue:
		m.ResetDisplayValue()
		return nil
	case dimension.FieldMeta:
		m.ResetMeta()
		return nil
	}
	return fmt.Errorf("unknown Dimension field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DimensionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.item != nil {
		edges = append(edges, dimension.EdgeItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DimensionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dimension.EdgeItem:
		ids := make([]ent.Value, 0, len(m.item))
		for id := range m.item {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DimensionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeditem != nil {
		edges = append(edges, dimension.EdgeItem)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DimensionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dimension.EdgeItem:
		ids := make([]ent.Value, 0, len(m.removeditem))
		for id := range m.removeditem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DimensionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareditem {
		edges = append(edges, dimension.EdgeItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DimensionMutation) EdgeCleared(name string) bool {
	switch name {
	case dimension.EdgeItem:
		return m.cleareditem
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DimensionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Dimension unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DimensionMutation) ResetEdge(name string) error {
	switch name {
	case dimension.EdgeItem:
		m.ResetItem()
		return nil
	}
	return fmt.Errorf("unknown Dimension edge %s", name)
}

// ItemMutation represents an operation that mutates the Item nodes in the graph.
type ItemMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	create_time          *time.Time
	update_time          *time.Time
	value                *float64
	addvalue             *float64
	timestamp            *time.Time
	meta                 *map[string]interface{}
	clearedFields        map[string]struct{}
	dimensions           map[int]struct{}
	removeddimensions    map[int]struct{}
	cleareddimensions    bool
	task_instance        *int
	clearedtask_instance bool
	metric               *int
	clearedmetric        bool
	done                 bool
	oldValue             func(context.Context) (*Item, error)
	predicates           []predicate.Item
}

var _ ent.Mutation = (*ItemMutation)(nil)

// itemOption allows management of the mutation configuration using functional options.
type itemOption func(*ItemMutation)

// newItemMutation creates new mutation for the Item entity.
func newItemMutation(c config, op Op, opts ...itemOption) *ItemMutation {
	m := &ItemMutation{
		config:        c,
		op:            op,
		typ:           TypeItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withItemID sets the ID field of the mutation.
func withItemID(id int) itemOption {
	return func(m *ItemMutation) {
		var (
			err   error
			once  sync.Once
			value *Item
		)
		m.oldValue = func(ctx context.Context) (*Item, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Item.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withItem sets the old Item of the mutation.
func withItem(node *Item) itemOption {
	return func(m *ItemMutation) {
		m.oldValue = func(context.Context) (*Item, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ItemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Item.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ItemMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ItemMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ItemMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ItemMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ItemMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ItemMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetValue sets the "value" field.
func (m *ItemMutation) SetValue(f float64) {
	m.value = &f
	m.addvalue = nil
}

// Value returns the value of the "value" field in the mutation.
func (m *ItemMutation) Value() (r float64, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldValue(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// AddValue adds f to the "value" field.
func (m *ItemMutation) AddValue(f float64) {
	if m.addvalue != nil {
		*m.addvalue += f
	} else {
		m.addvalue = &f
	}
}

// AddedValue returns the value that was added to the "value" field in this mutation.
func (m *ItemMutation) AddedValue() (r float64, exists bool) {
	v := m.addvalue
	if v == nil {
		return
	}
	return *v, true
}

// ResetValue resets all changes to the "value" field.
func (m *ItemMutation) ResetValue() {
	m.value = nil
	m.addvalue = nil
}

// SetTimestamp sets the "timestamp" field.
func (m *ItemMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *ItemMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *ItemMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetMeta sets the "meta" field.
func (m *ItemMutation) SetMeta(value map[string]interface{}) {
	m.meta = &value
}

// Meta returns the value of the "meta" field in the mutation.
func (m *ItemMutation) Meta() (r map[string]interface{}, exists bool) {
	v := m.meta
	if v == nil {
		return
	}
	return *v, true
}

// OldMeta returns the old "meta" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldMeta(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeta is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeta: %w", err)
	}
	return oldValue.Meta, nil
}

// ClearMeta clears the value of the "meta" field.
func (m *ItemMutation) ClearMeta() {
	m.meta = nil
	m.clearedFields[item.FieldMeta] = struct{}{}
}

// MetaCleared returns if the "meta" field was cleared in this mutation.
func (m *ItemMutation) MetaCleared() bool {
	_, ok := m.clearedFields[item.FieldMeta]
	return ok
}

// ResetMeta resets all changes to the "meta" field.
func (m *ItemMutation) ResetMeta() {
	m.meta = nil
	delete(m.clearedFields, item.FieldMeta)
}

// AddDimensionIDs adds the "dimensions" edge to the Dimension entity by ids.
func (m *ItemMutation) AddDimensionIDs(ids ...int) {
	if m.dimensions == nil {
		m.dimensions = make(map[int]struct{})
	}
	for i := range ids {
		m.dimensions[ids[i]] = struct{}{}
	}
}

// ClearDimensions clears the "dimensions" edge to the Dimension entity.
func (m *ItemMutation) ClearDimensions() {
	m.cleareddimensions = true
}

// DimensionsCleared reports if the "dimensions" edge to the Dimension entity was cleared.
func (m *ItemMutation) DimensionsCleared() bool {
	return m.cleareddimensions
}

// RemoveDimensionIDs removes the "dimensions" edge to the Dimension entity by IDs.
func (m *ItemMutation) RemoveDimensionIDs(ids ...int) {
	if m.removeddimensions == nil {
		m.removeddimensions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.dimensions, ids[i])
		m.removeddimensions[ids[i]] = struct{}{}
	}
}

// RemovedDimensions returns the removed IDs of the "dimensions" edge to the Dimension entity.
func (m *ItemMutation) RemovedDimensionsIDs() (ids []int) {
	for id := range m.removeddimensions {
		ids = append(ids, id)
	}
	return
}

// DimensionsIDs returns the "dimensions" edge IDs in the mutation.
func (m *ItemMutation) DimensionsIDs() (ids []int) {
	for id := range m.dimensions {
		ids = append(ids, id)
	}
	return
}

// ResetDimensions resets all changes to the "dimensions" edge.
func (m *ItemMutation) ResetDimensions() {
	m.dimensions = nil
	m.cleareddimensions = false
	m.removeddimensions = nil
}

// SetTaskInstanceID sets the "task_instance" edge to the TaskInstance entity by id.
func (m *ItemMutation) SetTaskInstanceID(id int) {
	m.task_instance = &id
}

// ClearTaskInstance clears the "task_instance" edge to the TaskInstance entity.
func (m *ItemMutation) ClearTaskInstance() {
	m.clearedtask_instance = true
}

// TaskInstanceCleared reports if the "task_instance" edge to the TaskInstance entity was cleared.
func (m *ItemMutation) TaskInstanceCleared() bool {
	return m.clearedtask_instance
}

// TaskInstanceID returns the "task_instance" edge ID in the mutation.
func (m *ItemMutation) TaskInstanceID() (id int, exists bool) {
	if m.task_instance != nil {
		return *m.task_instance, true
	}
	return
}

// TaskInstanceIDs returns the "task_instance" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskInstanceID instead. It exists only for internal usage by the builders.
func (m *ItemMutation) TaskInstanceIDs() (ids []int) {
	if id := m.task_instance; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTaskInstance resets all changes to the "task_instance" edge.
func (m *ItemMutation) ResetTaskInstance() {
	m.task_instance = nil
	m.clearedtask_instance = false
}

// SetMetricID sets the "metric" edge to the Metric entity by id.
func (m *ItemMutation) SetMetricID(id int) {
	m.metric = &id
}

// ClearMetric clears the "metric" edge to the Metric entity.
func (m *ItemMutation) ClearMetric() {
	m.clearedmetric = true
}

// MetricCleared reports if the "metric" edge to the Metric entity was cleared.
func (m *ItemMutation) MetricCleared() bool {
	return m.clearedmetric
}

// MetricID returns the "metric" edge ID in the mutation.
func (m *ItemMutation) MetricID() (id int, exists bool) {
	if m.metric != nil {
		return *m.metric, true
	}
	return
}

// MetricIDs returns the "metric" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MetricID instead. It exists only for internal usage by the builders.
func (m *ItemMutation) MetricIDs() (ids []int) {
	if id := m.metric; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMetric resets all changes to the "metric" edge.
func (m *ItemMutation) ResetMetric() {
	m.metric = nil
	m.clearedmetric = false
}

// Where appends a list predicates to the ItemMutation builder.
func (m *ItemMutation) Where(ps ...predicate.Item) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Item).
func (m *ItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ItemMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, item.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, item.FieldUpdateTime)
	}
	if m.value != nil {
		fields = append(fields, item.FieldValue)
	}
	if m.timestamp != nil {
		fields = append(fields, item.FieldTimestamp)
	}
	if m.meta != nil {
		fields = append(fields, item.FieldMeta)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case item.FieldCreateTime:
		return m.CreateTime()
	case item.FieldUpdateTime:
		return m.UpdateTime()
	case item.FieldValue:
		return m.Value()
	case item.FieldTimestamp:
		return m.Timestamp()
	case item.FieldMeta:
		return m.Meta()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case item.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case item.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case item.FieldValue:
		return m.OldValue(ctx)
	case item.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case item.FieldMeta:
		return m.OldMeta(ctx)
	}
	return nil, fmt.Errorf("unknown Item field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case item.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case item.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case item.FieldValue:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case item.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case item.FieldMeta:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeta(v)
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ItemMutation) AddedFields() []string {
	var fields []string
	if m.addvalue != nil {
		fields = append(fields, item.FieldValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case item.FieldValue:
		return m.AddedValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case item.FieldValue:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValue(v)
		return nil
	}
	return fmt.Errorf("unknown Item numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(item.FieldMeta) {
		fields = append(fields, item.FieldMeta)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemMutation) ClearField(name string) error {
	switch name {
	case item.FieldMeta:
		m.ClearMeta()
		return nil
	}
	return fmt.Errorf("unknown Item nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ItemMutation) ResetField(name string) error {
	switch name {
	case item.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case item.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case item.FieldValue:
		m.ResetValue()
		return nil
	case item.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case item.FieldMeta:
		m.ResetMeta()
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.dimensions != nil {
		edges = append(edges, item.EdgeDimensions)
	}
	if m.task_instance != nil {
		edges = append(edges, item.EdgeTaskInstance)
	}
	if m.metric != nil {
		edges = append(edges, item.EdgeMetric)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case item.EdgeDimensions:
		ids := make([]ent.Value, 0, len(m.dimensions))
		for id := range m.dimensions {
			ids = append(ids, id)
		}
		return ids
	case item.EdgeTaskInstance:
		if id := m.task_instance; id != nil {
			return []ent.Value{*id}
		}
	case item.EdgeMetric:
		if id := m.metric; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeddimensions != nil {
		edges = append(edges, item.EdgeDimensions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ItemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case item.EdgeDimensions:
		ids := make([]ent.Value, 0, len(m.removeddimensions))
		for id := range m.removeddimensions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareddimensions {
		edges = append(edges, item.EdgeDimensions)
	}
	if m.clearedtask_instance {
		edges = append(edges, item.EdgeTaskInstance)
	}
	if m.clearedmetric {
		edges = append(edges, item.EdgeMetric)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ItemMutation) EdgeCleared(name string) bool {
	switch name {
	case item.EdgeDimensions:
		return m.cleareddimensions
	case item.EdgeTaskInstance:
		return m.clearedtask_instance
	case item.EdgeMetric:
		return m.clearedmetric
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ItemMutation) ClearEdge(name string) error {
	switch name {
	case item.EdgeTaskInstance:
		m.ClearTaskInstance()
		return nil
	case item.EdgeMetric:
		m.ClearMetric()
		return nil
	}
	return fmt.Errorf("unknown Item unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ItemMutation) ResetEdge(name string) error {
	switch name {
	case item.EdgeDimensions:
		m.ResetDimensions()
		return nil
	case item.EdgeTaskInstance:
		m.ResetTaskInstance()
		return nil
	case item.EdgeMetric:
		m.ResetMetric()
		return nil
	}
	return fmt.Errorf("unknown Item edge %s", name)
}

// MetricMutation represents an operation that mutates the Metric nodes in the graph.
type MetricMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	title         *string
	display_title *map[string]string
	description   *string
	meta          *map[string]interface{}
	clearedFields map[string]struct{}
	items         map[int]struct{}
	removeditems  map[int]struct{}
	cleareditems  bool
	task          *int
	clearedtask   bool
	done          bool
	oldValue      func(context.Context) (*Metric, error)
	predicates    []predicate.Metric
}

var _ ent.Mutation = (*MetricMutation)(nil)

// metricOption allows management of the mutation configuration using functional options.
type metricOption func(*MetricMutation)

// newMetricMutation creates new mutation for the Metric entity.
func newMetricMutation(c config, op Op, opts ...metricOption) *MetricMutation {
	m := &MetricMutation{
		config:        c,
		op:            op,
		typ:           TypeMetric,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMetricID sets the ID field of the mutation.
func withMetricID(id int) metricOption {
	return func(m *MetricMutation) {
		var (
			err   error
			once  sync.Once
			value *Metric
		)
		m.oldValue = func(ctx context.Context) (*Metric, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Metric.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMetric sets the old Metric of the mutation.
func withMetric(node *Metric) metricOption {
	return func(m *MetricMutation) {
		m.oldValue = func(context.Context) (*Metric, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MetricMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MetricMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MetricMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MetricMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Metric.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *MetricMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *MetricMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Metric entity.
// If the Metric object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetricMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *MetricMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *MetricMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *MetricMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Metric entity.
// If the Metric object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetricMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *MetricMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetTitle sets the "title" field.
func (m *MetricMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *MetricMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Metric entity.
// If the Metric object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetricMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *MetricMutation) ResetTitle() {
	m.title = nil
}

// SetDisplayTitle sets the "display_title" field.
func (m *MetricMutation) SetDisplayTitle(value map[string]string) {
	m.display_title = &value
}

// DisplayTitle returns the value of the "display_title" field in the mutation.
func (m *MetricMutation) DisplayTitle() (r map[string]string, exists bool) {
	v := m.display_title
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayTitle returns the old "display_title" field's value of the Metric entity.
// If the Metric object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetricMutation) OldDisplayTitle(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayTitle: %w", err)
	}
	return oldValue.DisplayTitle, nil
}

// ClearDisplayTitle clears the value of the "display_title" field.
func (m *MetricMutation) ClearDisplayTitle() {
	m.display_title = nil
	m.clearedFields[metric.FieldDisplayTitle] = struct{}{}
}

// DisplayTitleCleared returns if the "display_title" field was cleared in this mutation.
func (m *MetricMutation) DisplayTitleCleared() bool {
	_, ok := m.clearedFields[metric.FieldDisplayTitle]
	return ok
}

// ResetDisplayTitle resets all changes to the "display_title" field.
func (m *MetricMutation) ResetDisplayTitle() {
	m.display_title = nil
	delete(m.clearedFields, metric.FieldDisplayTitle)
}

// SetDescription sets the "description" field.
func (m *MetricMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *MetricMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Metric entity.
// If the Metric object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetricMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *MetricMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[metric.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *MetricMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[metric.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *MetricMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, metric.FieldDescription)
}

// SetMeta sets the "meta" field.
func (m *MetricMutation) SetMeta(value map[string]interface{}) {
	m.meta = &value
}

// Meta returns the value of the "meta" field in the mutation.
func (m *MetricMutation) Meta() (r map[string]interface{}, exists bool) {
	v := m.meta
	if v == nil {
		return
	}
	return *v, true
}

// OldMeta returns the old "meta" field's value of the Metric entity.
// If the Metric object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetricMutation) OldMeta(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeta is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeta: %w", err)
	}
	return oldValue.Meta, nil
}

// ClearMeta clears the value of the "meta" field.
func (m *MetricMutation) ClearMeta() {
	m.meta = nil
	m.clearedFields[metric.FieldMeta] = struct{}{}
}

// MetaCleared returns if the "meta" field was cleared in this mutation.
func (m *MetricMutation) MetaCleared() bool {
	_, ok := m.clearedFields[metric.FieldMeta]
	return ok
}

// ResetMeta resets all changes to the "meta" field.
func (m *MetricMutation) ResetMeta() {
	m.meta = nil
	delete(m.clearedFields, metric.FieldMeta)
}

// AddItemIDs adds the "items" edge to the Item entity by ids.
func (m *MetricMutation) AddItemIDs(ids ...int) {
	if m.items == nil {
		m.items = make(map[int]struct{})
	}
	for i := range ids {
		m.items[ids[i]] = struct{}{}
	}
}

// ClearItems clears the "items" edge to the Item entity.
func (m *MetricMutation) ClearItems() {
	m.cleareditems = true
}

// ItemsCleared reports if the "items" edge to the Item entity was cleared.
func (m *MetricMutation) ItemsCleared() bool {
	return m.cleareditems
}

// RemoveItemIDs removes the "items" edge to the Item entity by IDs.
func (m *MetricMutation) RemoveItemIDs(ids ...int) {
	if m.removeditems == nil {
		m.removeditems = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.items, ids[i])
		m.removeditems[ids[i]] = struct{}{}
	}
}

// RemovedItems returns the removed IDs of the "items" edge to the Item entity.
func (m *MetricMutation) RemovedItemsIDs() (ids []int) {
	for id := range m.removeditems {
		ids = append(ids, id)
	}
	return
}

// ItemsIDs returns the "items" edge IDs in the mutation.
func (m *MetricMutation) ItemsIDs() (ids []int) {
	for id := range m.items {
		ids = append(ids, id)
	}
	return
}

// ResetItems resets all changes to the "items" edge.
func (m *MetricMutation) ResetItems() {
	m.items = nil
	m.cleareditems = false
	m.removeditems = nil
}

// SetTaskID sets the "task" edge to the Task entity by id.
func (m *MetricMutation) SetTaskID(id int) {
	m.task = &id
}

// ClearTask clears the "task" edge to the Task entity.
func (m *MetricMutation) ClearTask() {
	m.clearedtask = true
}

// TaskCleared reports if the "task" edge to the Task entity was cleared.
func (m *MetricMutation) TaskCleared() bool {
	return m.clearedtask
}

// TaskID returns the "task" edge ID in the mutation.
func (m *MetricMutation) TaskID() (id int, exists bool) {
	if m.task != nil {
		return *m.task, true
	}
	return
}

// TaskIDs returns the "task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskID instead. It exists only for internal usage by the builders.
func (m *MetricMutation) TaskIDs() (ids []int) {
	if id := m.task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTask resets all changes to the "task" edge.
func (m *MetricMutation) ResetTask() {
	m.task = nil
	m.clearedtask = false
}

// Where appends a list predicates to the MetricMutation builder.
func (m *MetricMutation) Where(ps ...predicate.Metric) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MetricMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Metric).
func (m *MetricMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MetricMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, metric.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, metric.FieldUpdateTime)
	}
	if m.title != nil {
		fields = append(fields, metric.FieldTitle)
	}
	if m.display_title != nil {
		fields = append(fields, metric.FieldDisplayTitle)
	}
	if m.description != nil {
		fields = append(fields, metric.FieldDescription)
	}
	if m.meta != nil {
		fields = append(fields, metric.FieldMeta)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MetricMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case metric.FieldCreateTime:
		return m.CreateTime()
	case metric.FieldUpdateTime:
		return m.UpdateTime()
	case metric.FieldTitle:
		return m.Title()
	case metric.FieldDisplayTitle:
		return m.DisplayTitle()
	case metric.FieldDescription:
		return m.Description()
	case metric.FieldMeta:
		return m.Meta()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MetricMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case metric.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case metric.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case metric.FieldTitle:
		return m.OldTitle(ctx)
	case metric.FieldDisplayTitle:
		return m.OldDisplayTitle(ctx)
	case metric.FieldDescription:
		return m.OldDescription(ctx)
	case metric.FieldMeta:
		return m.OldMeta(ctx)
	}
	return nil, fmt.Errorf("unknown Metric field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MetricMutation) SetField(name string, value ent.Value) error {
	switch name {
	case metric.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case metric.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case metric.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case metric.FieldDisplayTitle:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayTitle(v)
		return nil
	case metric.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case metric.FieldMeta:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeta(v)
		return nil
	}
	return fmt.Errorf("unknown Metric field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MetricMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MetricMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MetricMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Metric numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MetricMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(metric.FieldDisplayTitle) {
		fields = append(fields, metric.FieldDisplayTitle)
	}
	if m.FieldCleared(metric.FieldDescription) {
		fields = append(fields, metric.FieldDescription)
	}
	if m.FieldCleared(metric.FieldMeta) {
		fields = append(fields, metric.FieldMeta)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MetricMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MetricMutation) ClearField(name string) error {
	switch name {
	case metric.FieldDisplayTitle:
		m.ClearDisplayTitle()
		return nil
	case metric.FieldDescription:
		m.ClearDescription()
		return nil
	case metric.FieldMeta:
		m.ClearMeta()
		return nil
	}
	return fmt.Errorf("unknown Metric nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MetricMutation) ResetField(name string) error {
	switch name {
	case metric.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case metric.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case metric.FieldTitle:
		m.ResetTitle()
		return nil
	case metric.FieldDisplayTitle:
		m.ResetDisplayTitle()
		return nil
	case metric.FieldDescription:
		m.ResetDescription()
		return nil
	case metric.FieldMeta:
		m.ResetMeta()
		return nil
	}
	return fmt.Errorf("unknown Metric field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MetricMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.items != nil {
		edges = append(edges, metric.EdgeItems)
	}
	if m.task != nil {
		edges = append(edges, metric.EdgeTask)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MetricMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case metric.EdgeItems:
		ids := make([]ent.Value, 0, len(m.items))
		for id := range m.items {
			ids = append(ids, id)
		}
		return ids
	case metric.EdgeTask:
		if id := m.task; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MetricMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeditems != nil {
		edges = append(edges, metric.EdgeItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MetricMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case metric.EdgeItems:
		ids := make([]ent.Value, 0, len(m.removeditems))
		for id := range m.removeditems {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MetricMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareditems {
		edges = append(edges, metric.EdgeItems)
	}
	if m.clearedtask {
		edges = append(edges, metric.EdgeTask)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MetricMutation) EdgeCleared(name string) bool {
	switch name {
	case metric.EdgeItems:
		return m.cleareditems
	case metric.EdgeTask:
		return m.clearedtask
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MetricMutation) ClearEdge(name string) error {
	switch name {
	case metric.EdgeTask:
		m.ClearTask()
		return nil
	}
	return fmt.Errorf("unknown Metric unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MetricMutation) ResetEdge(name string) error {
	switch name {
	case metric.EdgeItems:
		m.ResetItems()
		return nil
	case metric.EdgeTask:
		m.ResetTask()
		return nil
	}
	return fmt.Errorf("unknown Metric edge %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op               Op
	typ              string
	id               *int
	create_time      *time.Time
	update_time      *time.Time
	_type            *task.Type
	code             *string
	title            *string
	description      *string
	active           *bool
	display          *bool
	schedule         *string
	args             *map[string]interface{}
	clearedFields    map[string]struct{}
	instances        map[int]struct{}
	removedinstances map[int]struct{}
	clearedinstances bool
	metrics          map[int]struct{}
	removedmetrics   map[int]struct{}
	clearedmetrics   bool
	category         *int
	clearedcategory  bool
	tags             map[int]struct{}
	removedtags      map[int]struct{}
	clearedtags      bool
	done             bool
	oldValue         func(context.Context) (*Task, error)
	predicates       []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id int) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Task.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *TaskMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TaskMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TaskMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *TaskMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *TaskMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *TaskMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetType sets the "type" field.
func (m *TaskMutation) SetType(t task.Type) {
	m._type = &t
}

// GetType returns the value of the "type" field in the mutation.
func (m *TaskMutation) GetType() (r task.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldType(ctx context.Context) (v task.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *TaskMutation) ResetType() {
	m._type = nil
}

// SetCode sets the "code" field.
func (m *TaskMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *TaskMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *TaskMutation) ResetCode() {
	m.code = nil
}

// SetTitle sets the "title" field.
func (m *TaskMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TaskMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TaskMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *TaskMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TaskMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *TaskMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[task.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *TaskMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[task.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *TaskMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, task.FieldDescription)
}

// SetActive sets the "active" field.
func (m *TaskMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *TaskMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *TaskMutation) ResetActive() {
	m.active = nil
}

// SetDisplay sets the "display" field.
func (m *TaskMutation) SetDisplay(b bool) {
	m.display = &b
}

// Display returns the value of the "display" field in the mutation.
func (m *TaskMutation) Display() (r bool, exists bool) {
	v := m.display
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplay returns the old "display" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDisplay(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplay: %w", err)
	}
	return oldValue.Display, nil
}

// ResetDisplay resets all changes to the "display" field.
func (m *TaskMutation) ResetDisplay() {
	m.display = nil
}

// SetSchedule sets the "schedule" field.
func (m *TaskMutation) SetSchedule(s string) {
	m.schedule = &s
}

// Schedule returns the value of the "schedule" field in the mutation.
func (m *TaskMutation) Schedule() (r string, exists bool) {
	v := m.schedule
	if v == nil {
		return
	}
	return *v, true
}

// OldSchedule returns the old "schedule" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldSchedule(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSchedule is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSchedule requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSchedule: %w", err)
	}
	return oldValue.Schedule, nil
}

// ClearSchedule clears the value of the "schedule" field.
func (m *TaskMutation) ClearSchedule() {
	m.schedule = nil
	m.clearedFields[task.FieldSchedule] = struct{}{}
}

// ScheduleCleared returns if the "schedule" field was cleared in this mutation.
func (m *TaskMutation) ScheduleCleared() bool {
	_, ok := m.clearedFields[task.FieldSchedule]
	return ok
}

// ResetSchedule resets all changes to the "schedule" field.
func (m *TaskMutation) ResetSchedule() {
	m.schedule = nil
	delete(m.clearedFields, task.FieldSchedule)
}

// SetArgs sets the "args" field.
func (m *TaskMutation) SetArgs(value map[string]interface{}) {
	m.args = &value
}

// Args returns the value of the "args" field in the mutation.
func (m *TaskMutation) Args() (r map[string]interface{}, exists bool) {
	v := m.args
	if v == nil {
		return
	}
	return *v, true
}

// OldArgs returns the old "args" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldArgs(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArgs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArgs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArgs: %w", err)
	}
	return oldValue.Args, nil
}

// ClearArgs clears the value of the "args" field.
func (m *TaskMutation) ClearArgs() {
	m.args = nil
	m.clearedFields[task.FieldArgs] = struct{}{}
}

// ArgsCleared returns if the "args" field was cleared in this mutation.
func (m *TaskMutation) ArgsCleared() bool {
	_, ok := m.clearedFields[task.FieldArgs]
	return ok
}

// ResetArgs resets all changes to the "args" field.
func (m *TaskMutation) ResetArgs() {
	m.args = nil
	delete(m.clearedFields, task.FieldArgs)
}

// AddInstanceIDs adds the "instances" edge to the TaskInstance entity by ids.
func (m *TaskMutation) AddInstanceIDs(ids ...int) {
	if m.instances == nil {
		m.instances = make(map[int]struct{})
	}
	for i := range ids {
		m.instances[ids[i]] = struct{}{}
	}
}

// ClearInstances clears the "instances" edge to the TaskInstance entity.
func (m *TaskMutation) ClearInstances() {
	m.clearedinstances = true
}

// InstancesCleared reports if the "instances" edge to the TaskInstance entity was cleared.
func (m *TaskMutation) InstancesCleared() bool {
	return m.clearedinstances
}

// RemoveInstanceIDs removes the "instances" edge to the TaskInstance entity by IDs.
func (m *TaskMutation) RemoveInstanceIDs(ids ...int) {
	if m.removedinstances == nil {
		m.removedinstances = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.instances, ids[i])
		m.removedinstances[ids[i]] = struct{}{}
	}
}

// RemovedInstances returns the removed IDs of the "instances" edge to the TaskInstance entity.
func (m *TaskMutation) RemovedInstancesIDs() (ids []int) {
	for id := range m.removedinstances {
		ids = append(ids, id)
	}
	return
}

// InstancesIDs returns the "instances" edge IDs in the mutation.
func (m *TaskMutation) InstancesIDs() (ids []int) {
	for id := range m.instances {
		ids = append(ids, id)
	}
	return
}

// ResetInstances resets all changes to the "instances" edge.
func (m *TaskMutation) ResetInstances() {
	m.instances = nil
	m.clearedinstances = false
	m.removedinstances = nil
}

// AddMetricIDs adds the "metrics" edge to the Metric entity by ids.
func (m *TaskMutation) AddMetricIDs(ids ...int) {
	if m.metrics == nil {
		m.metrics = make(map[int]struct{})
	}
	for i := range ids {
		m.metrics[ids[i]] = struct{}{}
	}
}

// ClearMetrics clears the "metrics" edge to the Metric entity.
func (m *TaskMutation) ClearMetrics() {
	m.clearedmetrics = true
}

// MetricsCleared reports if the "metrics" edge to the Metric entity was cleared.
func (m *TaskMutation) MetricsCleared() bool {
	return m.clearedmetrics
}

// RemoveMetricIDs removes the "metrics" edge to the Metric entity by IDs.
func (m *TaskMutation) RemoveMetricIDs(ids ...int) {
	if m.removedmetrics == nil {
		m.removedmetrics = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.metrics, ids[i])
		m.removedmetrics[ids[i]] = struct{}{}
	}
}

// RemovedMetrics returns the removed IDs of the "metrics" edge to the Metric entity.
func (m *TaskMutation) RemovedMetricsIDs() (ids []int) {
	for id := range m.removedmetrics {
		ids = append(ids, id)
	}
	return
}

// MetricsIDs returns the "metrics" edge IDs in the mutation.
func (m *TaskMutation) MetricsIDs() (ids []int) {
	for id := range m.metrics {
		ids = append(ids, id)
	}
	return
}

// ResetMetrics resets all changes to the "metrics" edge.
func (m *TaskMutation) ResetMetrics() {
	m.metrics = nil
	m.clearedmetrics = false
	m.removedmetrics = nil
}

// SetCategoryID sets the "category" edge to the TaskCategory entity by id.
func (m *TaskMutation) SetCategoryID(id int) {
	m.category = &id
}

// ClearCategory clears the "category" edge to the TaskCategory entity.
func (m *TaskMutation) ClearCategory() {
	m.clearedcategory = true
}

// CategoryCleared reports if the "category" edge to the TaskCategory entity was cleared.
func (m *TaskMutation) CategoryCleared() bool {
	return m.clearedcategory
}

// CategoryID returns the "category" edge ID in the mutation.
func (m *TaskMutation) CategoryID() (id int, exists bool) {
	if m.category != nil {
		return *m.category, true
	}
	return
}

// CategoryIDs returns the "category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoryID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) CategoryIDs() (ids []int) {
	if id := m.category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *TaskMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
}

// AddTagIDs adds the "tags" edge to the TaskTag entity by ids.
func (m *TaskMutation) AddTagIDs(ids ...int) {
	if m.tags == nil {
		m.tags = make(map[int]struct{})
	}
	for i := range ids {
		m.tags[ids[i]] = struct{}{}
	}
}

// ClearTags clears the "tags" edge to the TaskTag entity.
func (m *TaskMutation) ClearTags() {
	m.clearedtags = true
}

// TagsCleared reports if the "tags" edge to the TaskTag entity was cleared.
func (m *TaskMutation) TagsCleared() bool {
	return m.clearedtags
}

// RemoveTagIDs removes the "tags" edge to the TaskTag entity by IDs.
func (m *TaskMutation) RemoveTagIDs(ids ...int) {
	if m.removedtags == nil {
		m.removedtags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tags, ids[i])
		m.removedtags[ids[i]] = struct{}{}
	}
}

// RemovedTags returns the removed IDs of the "tags" edge to the TaskTag entity.
func (m *TaskMutation) RemovedTagsIDs() (ids []int) {
	for id := range m.removedtags {
		ids = append(ids, id)
	}
	return
}

// TagsIDs returns the "tags" edge IDs in the mutation.
func (m *TaskMutation) TagsIDs() (ids []int) {
	for id := range m.tags {
		ids = append(ids, id)
	}
	return
}

// ResetTags resets all changes to the "tags" edge.
func (m *TaskMutation) ResetTags() {
	m.tags = nil
	m.clearedtags = false
	m.removedtags = nil
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.create_time != nil {
		fields = append(fields, task.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, task.FieldUpdateTime)
	}
	if m._type != nil {
		fields = append(fields, task.FieldType)
	}
	if m.code != nil {
		fields = append(fields, task.FieldCode)
	}
	if m.title != nil {
		fields = append(fields, task.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, task.FieldDescription)
	}
	if m.active != nil {
		fields = append(fields, task.FieldActive)
	}
	if m.display != nil {
		fields = append(fields, task.FieldDisplay)
	}
	if m.schedule != nil {
		fields = append(fields, task.FieldSchedule)
	}
	if m.args != nil {
		fields = append(fields, task.FieldArgs)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldCreateTime:
		return m.CreateTime()
	case task.FieldUpdateTime:
		return m.UpdateTime()
	case task.FieldType:
		return m.GetType()
	case task.FieldCode:
		return m.Code()
	case task.FieldTitle:
		return m.Title()
	case task.FieldDescription:
		return m.Description()
	case task.FieldActive:
		return m.Active()
	case task.FieldDisplay:
		return m.Display()
	case task.FieldSchedule:
		return m.Schedule()
	case task.FieldArgs:
		return m.Args()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case task.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case task.FieldType:
		return m.OldType(ctx)
	case task.FieldCode:
		return m.OldCode(ctx)
	case task.FieldTitle:
		return m.OldTitle(ctx)
	case task.FieldDescription:
		return m.OldDescription(ctx)
	case task.FieldActive:
		return m.OldActive(ctx)
	case task.FieldDisplay:
		return m.OldDisplay(ctx)
	case task.FieldSchedule:
		return m.OldSchedule(ctx)
	case task.FieldArgs:
		return m.OldArgs(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case task.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case task.FieldType:
		v, ok := value.(task.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case task.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case task.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case task.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case task.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case task.FieldDisplay:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplay(v)
		return nil
	case task.FieldSchedule:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSchedule(v)
		return nil
	case task.FieldArgs:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArgs(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(task.FieldDescription) {
		fields = append(fields, task.FieldDescription)
	}
	if m.FieldCleared(task.FieldSchedule) {
		fields = append(fields, task.FieldSchedule)
	}
	if m.FieldCleared(task.FieldArgs) {
		fields = append(fields, task.FieldArgs)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	switch name {
	case task.FieldDescription:
		m.ClearDescription()
		return nil
	case task.FieldSchedule:
		m.ClearSchedule()
		return nil
	case task.FieldArgs:
		m.ClearArgs()
		return nil
	}
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case task.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case task.FieldType:
		m.ResetType()
		return nil
	case task.FieldCode:
		m.ResetCode()
		return nil
	case task.FieldTitle:
		m.ResetTitle()
		return nil
	case task.FieldDescription:
		m.ResetDescription()
		return nil
	case task.FieldActive:
		m.ResetActive()
		return nil
	case task.FieldDisplay:
		m.ResetDisplay()
		return nil
	case task.FieldSchedule:
		m.ResetSchedule()
		return nil
	case task.FieldArgs:
		m.ResetArgs()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.instances != nil {
		edges = append(edges, task.EdgeInstances)
	}
	if m.metrics != nil {
		edges = append(edges, task.EdgeMetrics)
	}
	if m.category != nil {
		edges = append(edges, task.EdgeCategory)
	}
	if m.tags != nil {
		edges = append(edges, task.EdgeTags)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeInstances:
		ids := make([]ent.Value, 0, len(m.instances))
		for id := range m.instances {
			ids = append(ids, id)
		}
		return ids
	case task.EdgeMetrics:
		ids := make([]ent.Value, 0, len(m.metrics))
		for id := range m.metrics {
			ids = append(ids, id)
		}
		return ids
	case task.EdgeCategory:
		if id := m.category; id != nil {
			return []ent.Value{*id}
		}
	case task.EdgeTags:
		ids := make([]ent.Value, 0, len(m.tags))
		for id := range m.tags {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedinstances != nil {
		edges = append(edges, task.EdgeInstances)
	}
	if m.removedmetrics != nil {
		edges = append(edges, task.EdgeMetrics)
	}
	if m.removedtags != nil {
		edges = append(edges, task.EdgeTags)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeInstances:
		ids := make([]ent.Value, 0, len(m.removedinstances))
		for id := range m.removedinstances {
			ids = append(ids, id)
		}
		return ids
	case task.EdgeMetrics:
		ids := make([]ent.Value, 0, len(m.removedmetrics))
		for id := range m.removedmetrics {
			ids = append(ids, id)
		}
		return ids
	case task.EdgeTags:
		ids := make([]ent.Value, 0, len(m.removedtags))
		for id := range m.removedtags {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedinstances {
		edges = append(edges, task.EdgeInstances)
	}
	if m.clearedmetrics {
		edges = append(edges, task.EdgeMetrics)
	}
	if m.clearedcategory {
		edges = append(edges, task.EdgeCategory)
	}
	if m.clearedtags {
		edges = append(edges, task.EdgeTags)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	switch name {
	case task.EdgeInstances:
		return m.clearedinstances
	case task.EdgeMetrics:
		return m.clearedmetrics
	case task.EdgeCategory:
		return m.clearedcategory
	case task.EdgeTags:
		return m.clearedtags
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	switch name {
	case task.EdgeCategory:
		m.ClearCategory()
		return nil
	}
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	switch name {
	case task.EdgeInstances:
		m.ResetInstances()
		return nil
	case task.EdgeMetrics:
		m.ResetMetrics()
		return nil
	case task.EdgeCategory:
		m.ResetCategory()
		return nil
	case task.EdgeTags:
		m.ResetTags()
		return nil
	}
	return fmt.Errorf("unknown Task edge %s", name)
}

// TaskCategoryMutation represents an operation that mutates the TaskCategory nodes in the graph.
type TaskCategoryMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	title         *string
	description   *string
	display       *bool
	meta          *map[string]interface{}
	clearedFields map[string]struct{}
	tasks         map[int]struct{}
	removedtasks  map[int]struct{}
	clearedtasks  bool
	done          bool
	oldValue      func(context.Context) (*TaskCategory, error)
	predicates    []predicate.TaskCategory
}

var _ ent.Mutation = (*TaskCategoryMutation)(nil)

// taskcategoryOption allows management of the mutation configuration using functional options.
type taskcategoryOption func(*TaskCategoryMutation)

// newTaskCategoryMutation creates new mutation for the TaskCategory entity.
func newTaskCategoryMutation(c config, op Op, opts ...taskcategoryOption) *TaskCategoryMutation {
	m := &TaskCategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeTaskCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskCategoryID sets the ID field of the mutation.
func withTaskCategoryID(id int) taskcategoryOption {
	return func(m *TaskCategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *TaskCategory
		)
		m.oldValue = func(ctx context.Context) (*TaskCategory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TaskCategory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTaskCategory sets the old TaskCategory of the mutation.
func withTaskCategory(node *TaskCategory) taskcategoryOption {
	return func(m *TaskCategoryMutation) {
		m.oldValue = func(context.Context) (*TaskCategory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskCategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskCategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskCategoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskCategoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TaskCategory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *TaskCategoryMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TaskCategoryMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the TaskCategory entity.
// If the TaskCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskCategoryMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TaskCategoryMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *TaskCategoryMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *TaskCategoryMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the TaskCategory entity.
// If the TaskCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskCategoryMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *TaskCategoryMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetTitle sets the "title" field.
func (m *TaskCategoryMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TaskCategoryMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the TaskCategory entity.
// If the TaskCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskCategoryMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TaskCategoryMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *TaskCategoryMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TaskCategoryMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the TaskCategory entity.
// If the TaskCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskCategoryMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *TaskCategoryMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[taskcategory.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *TaskCategoryMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[taskcategory.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *TaskCategoryMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, taskcategory.FieldDescription)
}

// SetDisplay sets the "display" field.
func (m *TaskCategoryMutation) SetDisplay(b bool) {
	m.display = &b
}

// Display returns the value of the "display" field in the mutation.
func (m *TaskCategoryMutation) Display() (r bool, exists bool) {
	v := m.display
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplay returns the old "display" field's value of the TaskCategory entity.
// If the TaskCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskCategoryMutation) OldDisplay(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplay: %w", err)
	}
	return oldValue.Display, nil
}

// ResetDisplay resets all changes to the "display" field.
func (m *TaskCategoryMutation) ResetDisplay() {
	m.display = nil
}

// SetMeta sets the "meta" field.
func (m *TaskCategoryMutation) SetMeta(value map[string]interface{}) {
	m.meta = &value
}

// Meta returns the value of the "meta" field in the mutation.
func (m *TaskCategoryMutation) Meta() (r map[string]interface{}, exists bool) {
	v := m.meta
	if v == nil {
		return
	}
	return *v, true
}

// OldMeta returns the old "meta" field's value of the TaskCategory entity.
// If the TaskCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskCategoryMutation) OldMeta(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeta is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeta: %w", err)
	}
	return oldValue.Meta, nil
}

// ClearMeta clears the value of the "meta" field.
func (m *TaskCategoryMutation) ClearMeta() {
	m.meta = nil
	m.clearedFields[taskcategory.FieldMeta] = struct{}{}
}

// MetaCleared returns if the "meta" field was cleared in this mutation.
func (m *TaskCategoryMutation) MetaCleared() bool {
	_, ok := m.clearedFields[taskcategory.FieldMeta]
	return ok
}

// ResetMeta resets all changes to the "meta" field.
func (m *TaskCategoryMutation) ResetMeta() {
	m.meta = nil
	delete(m.clearedFields, taskcategory.FieldMeta)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by ids.
func (m *TaskCategoryMutation) AddTaskIDs(ids ...int) {
	if m.tasks == nil {
		m.tasks = make(map[int]struct{})
	}
	for i := range ids {
		m.tasks[ids[i]] = struct{}{}
	}
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (m *TaskCategoryMutation) ClearTasks() {
	m.clearedtasks = true
}

// TasksCleared reports if the "tasks" edge to the Task entity was cleared.
func (m *TaskCategoryMutation) TasksCleared() bool {
	return m.clearedtasks
}

// RemoveTaskIDs removes the "tasks" edge to the Task entity by IDs.
func (m *TaskCategoryMutation) RemoveTaskIDs(ids ...int) {
	if m.removedtasks == nil {
		m.removedtasks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tasks, ids[i])
		m.removedtasks[ids[i]] = struct{}{}
	}
}

// RemovedTasks returns the removed IDs of the "tasks" edge to the Task entity.
func (m *TaskCategoryMutation) RemovedTasksIDs() (ids []int) {
	for id := range m.removedtasks {
		ids = append(ids, id)
	}
	return
}

// TasksIDs returns the "tasks" edge IDs in the mutation.
func (m *TaskCategoryMutation) TasksIDs() (ids []int) {
	for id := range m.tasks {
		ids = append(ids, id)
	}
	return
}

// ResetTasks resets all changes to the "tasks" edge.
func (m *TaskCategoryMutation) ResetTasks() {
	m.tasks = nil
	m.clearedtasks = false
	m.removedtasks = nil
}

// Where appends a list predicates to the TaskCategoryMutation builder.
func (m *TaskCategoryMutation) Where(ps ...predicate.TaskCategory) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TaskCategoryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TaskCategory).
func (m *TaskCategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskCategoryMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, taskcategory.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, taskcategory.FieldUpdateTime)
	}
	if m.title != nil {
		fields = append(fields, taskcategory.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, taskcategory.FieldDescription)
	}
	if m.display != nil {
		fields = append(fields, taskcategory.FieldDisplay)
	}
	if m.meta != nil {
		fields = append(fields, taskcategory.FieldMeta)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskCategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case taskcategory.FieldCreateTime:
		return m.CreateTime()
	case taskcategory.FieldUpdateTime:
		return m.UpdateTime()
	case taskcategory.FieldTitle:
		return m.Title()
	case taskcategory.FieldDescription:
		return m.Description()
	case taskcategory.FieldDisplay:
		return m.Display()
	case taskcategory.FieldMeta:
		return m.Meta()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskCategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case taskcategory.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case taskcategory.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case taskcategory.FieldTitle:
		return m.OldTitle(ctx)
	case taskcategory.FieldDescription:
		return m.OldDescription(ctx)
	case taskcategory.FieldDisplay:
		return m.OldDisplay(ctx)
	case taskcategory.FieldMeta:
		return m.OldMeta(ctx)
	}
	return nil, fmt.Errorf("unknown TaskCategory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskCategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case taskcategory.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case taskcategory.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case taskcategory.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case taskcategory.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case taskcategory.FieldDisplay:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplay(v)
		return nil
	case taskcategory.FieldMeta:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeta(v)
		return nil
	}
	return fmt.Errorf("unknown TaskCategory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskCategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskCategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskCategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TaskCategory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskCategoryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(taskcategory.FieldDescription) {
		fields = append(fields, taskcategory.FieldDescription)
	}
	if m.FieldCleared(taskcategory.FieldMeta) {
		fields = append(fields, taskcategory.FieldMeta)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskCategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskCategoryMutation) ClearField(name string) error {
	switch name {
	case taskcategory.FieldDescription:
		m.ClearDescription()
		return nil
	case taskcategory.FieldMeta:
		m.ClearMeta()
		return nil
	}
	return fmt.Errorf("unknown TaskCategory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskCategoryMutation) ResetField(name string) error {
	switch name {
	case taskcategory.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case taskcategory.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case taskcategory.FieldTitle:
		m.ResetTitle()
		return nil
	case taskcategory.FieldDescription:
		m.ResetDescription()
		return nil
	case taskcategory.FieldDisplay:
		m.ResetDisplay()
		return nil
	case taskcategory.FieldMeta:
		m.ResetMeta()
		return nil
	}
	return fmt.Errorf("unknown TaskCategory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskCategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.tasks != nil {
		edges = append(edges, taskcategory.EdgeTasks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskCategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case taskcategory.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.tasks))
		for id := range m.tasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskCategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtasks != nil {
		edges = append(edges, taskcategory.EdgeTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskCategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case taskcategory.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.removedtasks))
		for id := range m.removedtasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskCategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtasks {
		edges = append(edges, taskcategory.EdgeTasks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskCategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case taskcategory.EdgeTasks:
		return m.clearedtasks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskCategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown TaskCategory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskCategoryMutation) ResetEdge(name string) error {
	switch name {
	case taskcategory.EdgeTasks:
		m.ResetTasks()
		return nil
	}
	return fmt.Errorf("unknown TaskCategory edge %s", name)
}

// TaskInstanceMutation represents an operation that mutates the TaskInstance nodes in the graph.
type TaskInstanceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	start_time    *time.Time
	end_time      *time.Time
	attempt       *int
	addattempt    *int
	success       *bool
	running       *bool
	error         *string
	meta          *map[string]interface{}
	clearedFields map[string]struct{}
	items         map[int]struct{}
	removeditems  map[int]struct{}
	cleareditems  bool
	task          *int
	clearedtask   bool
	done          bool
	oldValue      func(context.Context) (*TaskInstance, error)
	predicates    []predicate.TaskInstance
}

var _ ent.Mutation = (*TaskInstanceMutation)(nil)

// taskinstanceOption allows management of the mutation configuration using functional options.
type taskinstanceOption func(*TaskInstanceMutation)

// newTaskInstanceMutation creates new mutation for the TaskInstance entity.
func newTaskInstanceMutation(c config, op Op, opts ...taskinstanceOption) *TaskInstanceMutation {
	m := &TaskInstanceMutation{
		config:        c,
		op:            op,
		typ:           TypeTaskInstance,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskInstanceID sets the ID field of the mutation.
func withTaskInstanceID(id int) taskinstanceOption {
	return func(m *TaskInstanceMutation) {
		var (
			err   error
			once  sync.Once
			value *TaskInstance
		)
		m.oldValue = func(ctx context.Context) (*TaskInstance, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TaskInstance.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTaskInstance sets the old TaskInstance of the mutation.
func withTaskInstance(node *TaskInstance) taskinstanceOption {
	return func(m *TaskInstanceMutation) {
		m.oldValue = func(context.Context) (*TaskInstance, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskInstanceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskInstanceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskInstanceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskInstanceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TaskInstance.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *TaskInstanceMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TaskInstanceMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TaskInstanceMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *TaskInstanceMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *TaskInstanceMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *TaskInstanceMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetStartTime sets the "start_time" field.
func (m *TaskInstanceMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *TaskInstanceMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *TaskInstanceMutation) ResetStartTime() {
	m.start_time = nil
}

// SetEndTime sets the "end_time" field.
func (m *TaskInstanceMutation) SetEndTime(t time.Time) {
	m.end_time = &t
}

// EndTime returns the value of the "end_time" field in the mutation.
func (m *TaskInstanceMutation) EndTime() (r time.Time, exists bool) {
	v := m.end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "end_time" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ClearEndTime clears the value of the "end_time" field.
func (m *TaskInstanceMutation) ClearEndTime() {
	m.end_time = nil
	m.clearedFields[taskinstance.FieldEndTime] = struct{}{}
}

// EndTimeCleared returns if the "end_time" field was cleared in this mutation.
func (m *TaskInstanceMutation) EndTimeCleared() bool {
	_, ok := m.clearedFields[taskinstance.FieldEndTime]
	return ok
}

// ResetEndTime resets all changes to the "end_time" field.
func (m *TaskInstanceMutation) ResetEndTime() {
	m.end_time = nil
	delete(m.clearedFields, taskinstance.FieldEndTime)
}

// SetAttempt sets the "attempt" field.
func (m *TaskInstanceMutation) SetAttempt(i int) {
	m.attempt = &i
	m.addattempt = nil
}

// Attempt returns the value of the "attempt" field in the mutation.
func (m *TaskInstanceMutation) Attempt() (r int, exists bool) {
	v := m.attempt
	if v == nil {
		return
	}
	return *v, true
}

// OldAttempt returns the old "attempt" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldAttempt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttempt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttempt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttempt: %w", err)
	}
	return oldValue.Attempt, nil
}

// AddAttempt adds i to the "attempt" field.
func (m *TaskInstanceMutation) AddAttempt(i int) {
	if m.addattempt != nil {
		*m.addattempt += i
	} else {
		m.addattempt = &i
	}
}

// AddedAttempt returns the value that was added to the "attempt" field in this mutation.
func (m *TaskInstanceMutation) AddedAttempt() (r int, exists bool) {
	v := m.addattempt
	if v == nil {
		return
	}
	return *v, true
}

// ResetAttempt resets all changes to the "attempt" field.
func (m *TaskInstanceMutation) ResetAttempt() {
	m.attempt = nil
	m.addattempt = nil
}

// SetSuccess sets the "success" field.
func (m *TaskInstanceMutation) SetSuccess(b bool) {
	m.success = &b
}

// Success returns the value of the "success" field in the mutation.
func (m *TaskInstanceMutation) Success() (r bool, exists bool) {
	v := m.success
	if v == nil {
		return
	}
	return *v, true
}

// OldSuccess returns the old "success" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldSuccess(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuccess is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuccess requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuccess: %w", err)
	}
	return oldValue.Success, nil
}

// ClearSuccess clears the value of the "success" field.
func (m *TaskInstanceMutation) ClearSuccess() {
	m.success = nil
	m.clearedFields[taskinstance.FieldSuccess] = struct{}{}
}

// SuccessCleared returns if the "success" field was cleared in this mutation.
func (m *TaskInstanceMutation) SuccessCleared() bool {
	_, ok := m.clearedFields[taskinstance.FieldSuccess]
	return ok
}

// ResetSuccess resets all changes to the "success" field.
func (m *TaskInstanceMutation) ResetSuccess() {
	m.success = nil
	delete(m.clearedFields, taskinstance.FieldSuccess)
}

// SetRunning sets the "running" field.
func (m *TaskInstanceMutation) SetRunning(b bool) {
	m.running = &b
}

// Running returns the value of the "running" field in the mutation.
func (m *TaskInstanceMutation) Running() (r bool, exists bool) {
	v := m.running
	if v == nil {
		return
	}
	return *v, true
}

// OldRunning returns the old "running" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldRunning(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRunning is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRunning requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRunning: %w", err)
	}
	return oldValue.Running, nil
}

// ResetRunning resets all changes to the "running" field.
func (m *TaskInstanceMutation) ResetRunning() {
	m.running = nil
}

// SetError sets the "error" field.
func (m *TaskInstanceMutation) SetError(s string) {
	m.error = &s
}

// Error returns the value of the "error" field in the mutation.
func (m *TaskInstanceMutation) Error() (r string, exists bool) {
	v := m.error
	if v == nil {
		return
	}
	return *v, true
}

// OldError returns the old "error" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldError(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldError is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldError requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldError: %w", err)
	}
	return oldValue.Error, nil
}

// ClearError clears the value of the "error" field.
func (m *TaskInstanceMutation) ClearError() {
	m.error = nil
	m.clearedFields[taskinstance.FieldError] = struct{}{}
}

// ErrorCleared returns if the "error" field was cleared in this mutation.
func (m *TaskInstanceMutation) ErrorCleared() bool {
	_, ok := m.clearedFields[taskinstance.FieldError]
	return ok
}

// ResetError resets all changes to the "error" field.
func (m *TaskInstanceMutation) ResetError() {
	m.error = nil
	delete(m.clearedFields, taskinstance.FieldError)
}

// SetMeta sets the "meta" field.
func (m *TaskInstanceMutation) SetMeta(value map[string]interface{}) {
	m.meta = &value
}

// Meta returns the value of the "meta" field in the mutation.
func (m *TaskInstanceMutation) Meta() (r map[string]interface{}, exists bool) {
	v := m.meta
	if v == nil {
		return
	}
	return *v, true
}

// OldMeta returns the old "meta" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldMeta(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeta is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeta: %w", err)
	}
	return oldValue.Meta, nil
}

// ClearMeta clears the value of the "meta" field.
func (m *TaskInstanceMutation) ClearMeta() {
	m.meta = nil
	m.clearedFields[taskinstance.FieldMeta] = struct{}{}
}

// MetaCleared returns if the "meta" field was cleared in this mutation.
func (m *TaskInstanceMutation) MetaCleared() bool {
	_, ok := m.clearedFields[taskinstance.FieldMeta]
	return ok
}

// ResetMeta resets all changes to the "meta" field.
func (m *TaskInstanceMutation) ResetMeta() {
	m.meta = nil
	delete(m.clearedFields, taskinstance.FieldMeta)
}

// AddItemIDs adds the "items" edge to the Item entity by ids.
func (m *TaskInstanceMutation) AddItemIDs(ids ...int) {
	if m.items == nil {
		m.items = make(map[int]struct{})
	}
	for i := range ids {
		m.items[ids[i]] = struct{}{}
	}
}

// ClearItems clears the "items" edge to the Item entity.
func (m *TaskInstanceMutation) ClearItems() {
	m.cleareditems = true
}

// ItemsCleared reports if the "items" edge to the Item entity was cleared.
func (m *TaskInstanceMutation) ItemsCleared() bool {
	return m.cleareditems
}

// RemoveItemIDs removes the "items" edge to the Item entity by IDs.
func (m *TaskInstanceMutation) RemoveItemIDs(ids ...int) {
	if m.removeditems == nil {
		m.removeditems = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.items, ids[i])
		m.removeditems[ids[i]] = struct{}{}
	}
}

// RemovedItems returns the removed IDs of the "items" edge to the Item entity.
func (m *TaskInstanceMutation) RemovedItemsIDs() (ids []int) {
	for id := range m.removeditems {
		ids = append(ids, id)
	}
	return
}

// ItemsIDs returns the "items" edge IDs in the mutation.
func (m *TaskInstanceMutation) ItemsIDs() (ids []int) {
	for id := range m.items {
		ids = append(ids, id)
	}
	return
}

// ResetItems resets all changes to the "items" edge.
func (m *TaskInstanceMutation) ResetItems() {
	m.items = nil
	m.cleareditems = false
	m.removeditems = nil
}

// SetTaskID sets the "task" edge to the Task entity by id.
func (m *TaskInstanceMutation) SetTaskID(id int) {
	m.task = &id
}

// ClearTask clears the "task" edge to the Task entity.
func (m *TaskInstanceMutation) ClearTask() {
	m.clearedtask = true
}

// TaskCleared reports if the "task" edge to the Task entity was cleared.
func (m *TaskInstanceMutation) TaskCleared() bool {
	return m.clearedtask
}

// TaskID returns the "task" edge ID in the mutation.
func (m *TaskInstanceMutation) TaskID() (id int, exists bool) {
	if m.task != nil {
		return *m.task, true
	}
	return
}

// TaskIDs returns the "task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskID instead. It exists only for internal usage by the builders.
func (m *TaskInstanceMutation) TaskIDs() (ids []int) {
	if id := m.task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTask resets all changes to the "task" edge.
func (m *TaskInstanceMutation) ResetTask() {
	m.task = nil
	m.clearedtask = false
}

// Where appends a list predicates to the TaskInstanceMutation builder.
func (m *TaskInstanceMutation) Where(ps ...predicate.TaskInstance) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TaskInstanceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TaskInstance).
func (m *TaskInstanceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskInstanceMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.create_time != nil {
		fields = append(fields, taskinstance.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, taskinstance.FieldUpdateTime)
	}
	if m.start_time != nil {
		fields = append(fields, taskinstance.FieldStartTime)
	}
	if m.end_time != nil {
		fields = append(fields, taskinstance.FieldEndTime)
	}
	if m.attempt != nil {
		fields = append(fields, taskinstance.FieldAttempt)
	}
	if m.success != nil {
		fields = append(fields, taskinstance.FieldSuccess)
	}
	if m.running != nil {
		fields = append(fields, taskinstance.FieldRunning)
	}
	if m.error != nil {
		fields = append(fields, taskinstance.FieldError)
	}
	if m.meta != nil {
		fields = append(fields, taskinstance.FieldMeta)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskInstanceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case taskinstance.FieldCreateTime:
		return m.CreateTime()
	case taskinstance.FieldUpdateTime:
		return m.UpdateTime()
	case taskinstance.FieldStartTime:
		return m.StartTime()
	case taskinstance.FieldEndTime:
		return m.EndTime()
	case taskinstance.FieldAttempt:
		return m.Attempt()
	case taskinstance.FieldSuccess:
		return m.Success()
	case taskinstance.FieldRunning:
		return m.Running()
	case taskinstance.FieldError:
		return m.Error()
	case taskinstance.FieldMeta:
		return m.Meta()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskInstanceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case taskinstance.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case taskinstance.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case taskinstance.FieldStartTime:
		return m.OldStartTime(ctx)
	case taskinstance.FieldEndTime:
		return m.OldEndTime(ctx)
	case taskinstance.FieldAttempt:
		return m.OldAttempt(ctx)
	case taskinstance.FieldSuccess:
		return m.OldSuccess(ctx)
	case taskinstance.FieldRunning:
		return m.OldRunning(ctx)
	case taskinstance.FieldError:
		return m.OldError(ctx)
	case taskinstance.FieldMeta:
		return m.OldMeta(ctx)
	}
	return nil, fmt.Errorf("unknown TaskInstance field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskInstanceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case taskinstance.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case taskinstance.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case taskinstance.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case taskinstance.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	case taskinstance.FieldAttempt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttempt(v)
		return nil
	case taskinstance.FieldSuccess:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuccess(v)
		return nil
	case taskinstance.FieldRunning:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRunning(v)
		return nil
	case taskinstance.FieldError:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetError(v)
		return nil
	case taskinstance.FieldMeta:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeta(v)
		return nil
	}
	return fmt.Errorf("unknown TaskInstance field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskInstanceMutation) AddedFields() []string {
	var fields []string
	if m.addattempt != nil {
		fields = append(fields, taskinstance.FieldAttempt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskInstanceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case taskinstance.FieldAttempt:
		return m.AddedAttempt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskInstanceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case taskinstance.FieldAttempt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAttempt(v)
		return nil
	}
	return fmt.Errorf("unknown TaskInstance numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskInstanceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(taskinstance.FieldEndTime) {
		fields = append(fields, taskinstance.FieldEndTime)
	}
	if m.FieldCleared(taskinstance.FieldSuccess) {
		fields = append(fields, taskinstance.FieldSuccess)
	}
	if m.FieldCleared(taskinstance.FieldError) {
		fields = append(fields, taskinstance.FieldError)
	}
	if m.FieldCleared(taskinstance.FieldMeta) {
		fields = append(fields, taskinstance.FieldMeta)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskInstanceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskInstanceMutation) ClearField(name string) error {
	switch name {
	case taskinstance.FieldEndTime:
		m.ClearEndTime()
		return nil
	case taskinstance.FieldSuccess:
		m.ClearSuccess()
		return nil
	case taskinstance.FieldError:
		m.ClearError()
		return nil
	case taskinstance.FieldMeta:
		m.ClearMeta()
		return nil
	}
	return fmt.Errorf("unknown TaskInstance nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskInstanceMutation) ResetField(name string) error {
	switch name {
	case taskinstance.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case taskinstance.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case taskinstance.FieldStartTime:
		m.ResetStartTime()
		return nil
	case taskinstance.FieldEndTime:
		m.ResetEndTime()
		return nil
	case taskinstance.FieldAttempt:
		m.ResetAttempt()
		return nil
	case taskinstance.FieldSuccess:
		m.ResetSuccess()
		return nil
	case taskinstance.FieldRunning:
		m.ResetRunning()
		return nil
	case taskinstance.FieldError:
		m.ResetError()
		return nil
	case taskinstance.FieldMeta:
		m.ResetMeta()
		return nil
	}
	return fmt.Errorf("unknown TaskInstance field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskInstanceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.items != nil {
		edges = append(edges, taskinstance.EdgeItems)
	}
	if m.task != nil {
		edges = append(edges, taskinstance.EdgeTask)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskInstanceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case taskinstance.EdgeItems:
		ids := make([]ent.Value, 0, len(m.items))
		for id := range m.items {
			ids = append(ids, id)
		}
		return ids
	case taskinstance.EdgeTask:
		if id := m.task; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskInstanceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeditems != nil {
		edges = append(edges, taskinstance.EdgeItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskInstanceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case taskinstance.EdgeItems:
		ids := make([]ent.Value, 0, len(m.removeditems))
		for id := range m.removeditems {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskInstanceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareditems {
		edges = append(edges, taskinstance.EdgeItems)
	}
	if m.clearedtask {
		edges = append(edges, taskinstance.EdgeTask)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskInstanceMutation) EdgeCleared(name string) bool {
	switch name {
	case taskinstance.EdgeItems:
		return m.cleareditems
	case taskinstance.EdgeTask:
		return m.clearedtask
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskInstanceMutation) ClearEdge(name string) error {
	switch name {
	case taskinstance.EdgeTask:
		m.ClearTask()
		return nil
	}
	return fmt.Errorf("unknown TaskInstance unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskInstanceMutation) ResetEdge(name string) error {
	switch name {
	case taskinstance.EdgeItems:
		m.ResetItems()
		return nil
	case taskinstance.EdgeTask:
		m.ResetTask()
		return nil
	}
	return fmt.Errorf("unknown TaskInstance edge %s", name)
}

// TaskTagMutation represents an operation that mutates the TaskTag nodes in the graph.
type TaskTagMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	title         *string
	description   *string
	display       *bool
	meta          *map[string]interface{}
	clearedFields map[string]struct{}
	tasks         map[int]struct{}
	removedtasks  map[int]struct{}
	clearedtasks  bool
	done          bool
	oldValue      func(context.Context) (*TaskTag, error)
	predicates    []predicate.TaskTag
}

var _ ent.Mutation = (*TaskTagMutation)(nil)

// tasktagOption allows management of the mutation configuration using functional options.
type tasktagOption func(*TaskTagMutation)

// newTaskTagMutation creates new mutation for the TaskTag entity.
func newTaskTagMutation(c config, op Op, opts ...tasktagOption) *TaskTagMutation {
	m := &TaskTagMutation{
		config:        c,
		op:            op,
		typ:           TypeTaskTag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskTagID sets the ID field of the mutation.
func withTaskTagID(id int) tasktagOption {
	return func(m *TaskTagMutation) {
		var (
			err   error
			once  sync.Once
			value *TaskTag
		)
		m.oldValue = func(ctx context.Context) (*TaskTag, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TaskTag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTaskTag sets the old TaskTag of the mutation.
func withTaskTag(node *TaskTag) tasktagOption {
	return func(m *TaskTagMutation) {
		m.oldValue = func(context.Context) (*TaskTag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskTagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskTagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskTagMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskTagMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TaskTag.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *TaskTagMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TaskTagMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the TaskTag entity.
// If the TaskTag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskTagMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TaskTagMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *TaskTagMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *TaskTagMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the TaskTag entity.
// If the TaskTag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskTagMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *TaskTagMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetTitle sets the "title" field.
func (m *TaskTagMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TaskTagMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the TaskTag entity.
// If the TaskTag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskTagMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TaskTagMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *TaskTagMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TaskTagMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the TaskTag entity.
// If the TaskTag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskTagMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *TaskTagMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[tasktag.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *TaskTagMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[tasktag.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *TaskTagMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, tasktag.FieldDescription)
}

// SetDisplay sets the "display" field.
func (m *TaskTagMutation) SetDisplay(b bool) {
	m.display = &b
}

// Display returns the value of the "display" field in the mutation.
func (m *TaskTagMutation) Display() (r bool, exists bool) {
	v := m.display
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplay returns the old "display" field's value of the TaskTag entity.
// If the TaskTag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskTagMutation) OldDisplay(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplay: %w", err)
	}
	return oldValue.Display, nil
}

// ResetDisplay resets all changes to the "display" field.
func (m *TaskTagMutation) ResetDisplay() {
	m.display = nil
}

// SetMeta sets the "meta" field.
func (m *TaskTagMutation) SetMeta(value map[string]interface{}) {
	m.meta = &value
}

// Meta returns the value of the "meta" field in the mutation.
func (m *TaskTagMutation) Meta() (r map[string]interface{}, exists bool) {
	v := m.meta
	if v == nil {
		return
	}
	return *v, true
}

// OldMeta returns the old "meta" field's value of the TaskTag entity.
// If the TaskTag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskTagMutation) OldMeta(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeta is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeta: %w", err)
	}
	return oldValue.Meta, nil
}

// ClearMeta clears the value of the "meta" field.
func (m *TaskTagMutation) ClearMeta() {
	m.meta = nil
	m.clearedFields[tasktag.FieldMeta] = struct{}{}
}

// MetaCleared returns if the "meta" field was cleared in this mutation.
func (m *TaskTagMutation) MetaCleared() bool {
	_, ok := m.clearedFields[tasktag.FieldMeta]
	return ok
}

// ResetMeta resets all changes to the "meta" field.
func (m *TaskTagMutation) ResetMeta() {
	m.meta = nil
	delete(m.clearedFields, tasktag.FieldMeta)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by ids.
func (m *TaskTagMutation) AddTaskIDs(ids ...int) {
	if m.tasks == nil {
		m.tasks = make(map[int]struct{})
	}
	for i := range ids {
		m.tasks[ids[i]] = struct{}{}
	}
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (m *TaskTagMutation) ClearTasks() {
	m.clearedtasks = true
}

// TasksCleared reports if the "tasks" edge to the Task entity was cleared.
func (m *TaskTagMutation) TasksCleared() bool {
	return m.clearedtasks
}

// RemoveTaskIDs removes the "tasks" edge to the Task entity by IDs.
func (m *TaskTagMutation) RemoveTaskIDs(ids ...int) {
	if m.removedtasks == nil {
		m.removedtasks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tasks, ids[i])
		m.removedtasks[ids[i]] = struct{}{}
	}
}

// RemovedTasks returns the removed IDs of the "tasks" edge to the Task entity.
func (m *TaskTagMutation) RemovedTasksIDs() (ids []int) {
	for id := range m.removedtasks {
		ids = append(ids, id)
	}
	return
}

// TasksIDs returns the "tasks" edge IDs in the mutation.
func (m *TaskTagMutation) TasksIDs() (ids []int) {
	for id := range m.tasks {
		ids = append(ids, id)
	}
	return
}

// ResetTasks resets all changes to the "tasks" edge.
func (m *TaskTagMutation) ResetTasks() {
	m.tasks = nil
	m.clearedtasks = false
	m.removedtasks = nil
}

// Where appends a list predicates to the TaskTagMutation builder.
func (m *TaskTagMutation) Where(ps ...predicate.TaskTag) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TaskTagMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TaskTag).
func (m *TaskTagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskTagMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, tasktag.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, tasktag.FieldUpdateTime)
	}
	if m.title != nil {
		fields = append(fields, tasktag.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, tasktag.FieldDescription)
	}
	if m.display != nil {
		fields = append(fields, tasktag.FieldDisplay)
	}
	if m.meta != nil {
		fields = append(fields, tasktag.FieldMeta)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskTagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tasktag.FieldCreateTime:
		return m.CreateTime()
	case tasktag.FieldUpdateTime:
		return m.UpdateTime()
	case tasktag.FieldTitle:
		return m.Title()
	case tasktag.FieldDescription:
		return m.Description()
	case tasktag.FieldDisplay:
		return m.Display()
	case tasktag.FieldMeta:
		return m.Meta()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskTagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tasktag.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case tasktag.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case tasktag.FieldTitle:
		return m.OldTitle(ctx)
	case tasktag.FieldDescription:
		return m.OldDescription(ctx)
	case tasktag.FieldDisplay:
		return m.OldDisplay(ctx)
	case tasktag.FieldMeta:
		return m.OldMeta(ctx)
	}
	return nil, fmt.Errorf("unknown TaskTag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskTagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tasktag.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case tasktag.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case tasktag.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case tasktag.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case tasktag.FieldDisplay:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplay(v)
		return nil
	case tasktag.FieldMeta:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeta(v)
		return nil
	}
	return fmt.Errorf("unknown TaskTag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskTagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskTagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskTagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TaskTag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskTagMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tasktag.FieldDescription) {
		fields = append(fields, tasktag.FieldDescription)
	}
	if m.FieldCleared(tasktag.FieldMeta) {
		fields = append(fields, tasktag.FieldMeta)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskTagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskTagMutation) ClearField(name string) error {
	switch name {
	case tasktag.FieldDescription:
		m.ClearDescription()
		return nil
	case tasktag.FieldMeta:
		m.ClearMeta()
		return nil
	}
	return fmt.Errorf("unknown TaskTag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskTagMutation) ResetField(name string) error {
	switch name {
	case tasktag.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case tasktag.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case tasktag.FieldTitle:
		m.ResetTitle()
		return nil
	case tasktag.FieldDescription:
		m.ResetDescription()
		return nil
	case tasktag.FieldDisplay:
		m.ResetDisplay()
		return nil
	case tasktag.FieldMeta:
		m.ResetMeta()
		return nil
	}
	return fmt.Errorf("unknown TaskTag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskTagMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.tasks != nil {
		edges = append(edges, tasktag.EdgeTasks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskTagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tasktag.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.tasks))
		for id := range m.tasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskTagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtasks != nil {
		edges = append(edges, tasktag.EdgeTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskTagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tasktag.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.removedtasks))
		for id := range m.removedtasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskTagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtasks {
		edges = append(edges, tasktag.EdgeTasks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskTagMutation) EdgeCleared(name string) bool {
	switch name {
	case tasktag.EdgeTasks:
		return m.clearedtasks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskTagMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown TaskTag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskTagMutation) ResetEdge(name string) error {
	switch name {
	case tasktag.EdgeTasks:
		m.ResetTasks()
		return nil
	}
	return fmt.Errorf("unknown TaskTag edge %s", name)
}
