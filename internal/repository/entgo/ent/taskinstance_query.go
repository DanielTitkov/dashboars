// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/item"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/task"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/taskinstance"
)

// TaskInstanceQuery is the builder for querying TaskInstance entities.
type TaskInstanceQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TaskInstance
	// eager-loading edges.
	withItems *ItemQuery
	withTask  *TaskQuery
	withFKs   bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TaskInstanceQuery builder.
func (tiq *TaskInstanceQuery) Where(ps ...predicate.TaskInstance) *TaskInstanceQuery {
	tiq.predicates = append(tiq.predicates, ps...)
	return tiq
}

// Limit adds a limit step to the query.
func (tiq *TaskInstanceQuery) Limit(limit int) *TaskInstanceQuery {
	tiq.limit = &limit
	return tiq
}

// Offset adds an offset step to the query.
func (tiq *TaskInstanceQuery) Offset(offset int) *TaskInstanceQuery {
	tiq.offset = &offset
	return tiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tiq *TaskInstanceQuery) Unique(unique bool) *TaskInstanceQuery {
	tiq.unique = &unique
	return tiq
}

// Order adds an order step to the query.
func (tiq *TaskInstanceQuery) Order(o ...OrderFunc) *TaskInstanceQuery {
	tiq.order = append(tiq.order, o...)
	return tiq
}

// QueryItems chains the current query on the "items" edge.
func (tiq *TaskInstanceQuery) QueryItems() *ItemQuery {
	query := &ItemQuery{config: tiq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(taskinstance.Table, taskinstance.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, taskinstance.ItemsTable, taskinstance.ItemsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTask chains the current query on the "task" edge.
func (tiq *TaskInstanceQuery) QueryTask() *TaskQuery {
	query := &TaskQuery{config: tiq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(taskinstance.Table, taskinstance.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskinstance.TaskTable, taskinstance.TaskColumn),
		)
		fromU = sqlgraph.SetNeighbors(tiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TaskInstance entity from the query.
// Returns a *NotFoundError when no TaskInstance was found.
func (tiq *TaskInstanceQuery) First(ctx context.Context) (*TaskInstance, error) {
	nodes, err := tiq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{taskinstance.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tiq *TaskInstanceQuery) FirstX(ctx context.Context) *TaskInstance {
	node, err := tiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TaskInstance ID from the query.
// Returns a *NotFoundError when no TaskInstance ID was found.
func (tiq *TaskInstanceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tiq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{taskinstance.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tiq *TaskInstanceQuery) FirstIDX(ctx context.Context) int {
	id, err := tiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TaskInstance entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one TaskInstance entity is not found.
// Returns a *NotFoundError when no TaskInstance entities are found.
func (tiq *TaskInstanceQuery) Only(ctx context.Context) (*TaskInstance, error) {
	nodes, err := tiq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{taskinstance.Label}
	default:
		return nil, &NotSingularError{taskinstance.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tiq *TaskInstanceQuery) OnlyX(ctx context.Context) *TaskInstance {
	node, err := tiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TaskInstance ID in the query.
// Returns a *NotSingularError when exactly one TaskInstance ID is not found.
// Returns a *NotFoundError when no entities are found.
func (tiq *TaskInstanceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tiq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{taskinstance.Label}
	default:
		err = &NotSingularError{taskinstance.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tiq *TaskInstanceQuery) OnlyIDX(ctx context.Context) int {
	id, err := tiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TaskInstances.
func (tiq *TaskInstanceQuery) All(ctx context.Context) ([]*TaskInstance, error) {
	if err := tiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tiq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tiq *TaskInstanceQuery) AllX(ctx context.Context) []*TaskInstance {
	nodes, err := tiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TaskInstance IDs.
func (tiq *TaskInstanceQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := tiq.Select(taskinstance.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tiq *TaskInstanceQuery) IDsX(ctx context.Context) []int {
	ids, err := tiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tiq *TaskInstanceQuery) Count(ctx context.Context) (int, error) {
	if err := tiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tiq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tiq *TaskInstanceQuery) CountX(ctx context.Context) int {
	count, err := tiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tiq *TaskInstanceQuery) Exist(ctx context.Context) (bool, error) {
	if err := tiq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tiq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tiq *TaskInstanceQuery) ExistX(ctx context.Context) bool {
	exist, err := tiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TaskInstanceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tiq *TaskInstanceQuery) Clone() *TaskInstanceQuery {
	if tiq == nil {
		return nil
	}
	return &TaskInstanceQuery{
		config:     tiq.config,
		limit:      tiq.limit,
		offset:     tiq.offset,
		order:      append([]OrderFunc{}, tiq.order...),
		predicates: append([]predicate.TaskInstance{}, tiq.predicates...),
		withItems:  tiq.withItems.Clone(),
		withTask:   tiq.withTask.Clone(),
		// clone intermediate query.
		sql:  tiq.sql.Clone(),
		path: tiq.path,
	}
}

// WithItems tells the query-builder to eager-load the nodes that are connected to
// the "items" edge. The optional arguments are used to configure the query builder of the edge.
func (tiq *TaskInstanceQuery) WithItems(opts ...func(*ItemQuery)) *TaskInstanceQuery {
	query := &ItemQuery{config: tiq.config}
	for _, opt := range opts {
		opt(query)
	}
	tiq.withItems = query
	return tiq
}

// WithTask tells the query-builder to eager-load the nodes that are connected to
// the "task" edge. The optional arguments are used to configure the query builder of the edge.
func (tiq *TaskInstanceQuery) WithTask(opts ...func(*TaskQuery)) *TaskInstanceQuery {
	query := &TaskQuery{config: tiq.config}
	for _, opt := range opts {
		opt(query)
	}
	tiq.withTask = query
	return tiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TaskInstance.Query().
//		GroupBy(taskinstance.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (tiq *TaskInstanceQuery) GroupBy(field string, fields ...string) *TaskInstanceGroupBy {
	group := &TaskInstanceGroupBy{config: tiq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tiq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.TaskInstance.Query().
//		Select(taskinstance.FieldCreateTime).
//		Scan(ctx, &v)
//
func (tiq *TaskInstanceQuery) Select(fields ...string) *TaskInstanceSelect {
	tiq.fields = append(tiq.fields, fields...)
	return &TaskInstanceSelect{TaskInstanceQuery: tiq}
}

func (tiq *TaskInstanceQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tiq.fields {
		if !taskinstance.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tiq.path != nil {
		prev, err := tiq.path(ctx)
		if err != nil {
			return err
		}
		tiq.sql = prev
	}
	return nil
}

func (tiq *TaskInstanceQuery) sqlAll(ctx context.Context) ([]*TaskInstance, error) {
	var (
		nodes       = []*TaskInstance{}
		withFKs     = tiq.withFKs
		_spec       = tiq.querySpec()
		loadedTypes = [2]bool{
			tiq.withItems != nil,
			tiq.withTask != nil,
		}
	)
	if tiq.withTask != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, taskinstance.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TaskInstance{config: tiq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, tiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := tiq.withItems; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TaskInstance)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Items = []*Item{}
		}
		query.withFKs = true
		query.Where(predicate.Item(func(s *sql.Selector) {
			s.Where(sql.InValues(taskinstance.ItemsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.task_instance_items
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "task_instance_items" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_instance_items" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Items = append(node.Edges.Items, n)
		}
	}

	if query := tiq.withTask; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TaskInstance)
		for i := range nodes {
			if nodes[i].task_instances == nil {
				continue
			}
			fk := *nodes[i].task_instances
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(task.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_instances" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Task = n
			}
		}
	}

	return nodes, nil
}

func (tiq *TaskInstanceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tiq.querySpec()
	_spec.Node.Columns = tiq.fields
	if len(tiq.fields) > 0 {
		_spec.Unique = tiq.unique != nil && *tiq.unique
	}
	return sqlgraph.CountNodes(ctx, tiq.driver, _spec)
}

func (tiq *TaskInstanceQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tiq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (tiq *TaskInstanceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskinstance.Table,
			Columns: taskinstance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: taskinstance.FieldID,
			},
		},
		From:   tiq.sql,
		Unique: true,
	}
	if unique := tiq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tiq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskinstance.FieldID)
		for i := range fields {
			if fields[i] != taskinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tiq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tiq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tiq *TaskInstanceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tiq.driver.Dialect())
	t1 := builder.Table(taskinstance.Table)
	columns := tiq.fields
	if len(columns) == 0 {
		columns = taskinstance.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tiq.sql != nil {
		selector = tiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tiq.unique != nil && *tiq.unique {
		selector.Distinct()
	}
	for _, p := range tiq.predicates {
		p(selector)
	}
	for _, p := range tiq.order {
		p(selector)
	}
	if offset := tiq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tiq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TaskInstanceGroupBy is the group-by builder for TaskInstance entities.
type TaskInstanceGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tigb *TaskInstanceGroupBy) Aggregate(fns ...AggregateFunc) *TaskInstanceGroupBy {
	tigb.fns = append(tigb.fns, fns...)
	return tigb
}

// Scan applies the group-by query and scans the result into the given value.
func (tigb *TaskInstanceGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tigb.path(ctx)
	if err != nil {
		return err
	}
	tigb.sql = query
	return tigb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tigb *TaskInstanceGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tigb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (tigb *TaskInstanceGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tigb.fields) > 1 {
		return nil, errors.New("ent: TaskInstanceGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tigb *TaskInstanceGroupBy) StringsX(ctx context.Context) []string {
	v, err := tigb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tigb *TaskInstanceGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tigb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskinstance.Label}
	default:
		err = fmt.Errorf("ent: TaskInstanceGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tigb *TaskInstanceGroupBy) StringX(ctx context.Context) string {
	v, err := tigb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (tigb *TaskInstanceGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tigb.fields) > 1 {
		return nil, errors.New("ent: TaskInstanceGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tigb *TaskInstanceGroupBy) IntsX(ctx context.Context) []int {
	v, err := tigb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tigb *TaskInstanceGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tigb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskinstance.Label}
	default:
		err = fmt.Errorf("ent: TaskInstanceGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tigb *TaskInstanceGroupBy) IntX(ctx context.Context) int {
	v, err := tigb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (tigb *TaskInstanceGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tigb.fields) > 1 {
		return nil, errors.New("ent: TaskInstanceGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tigb *TaskInstanceGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tigb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tigb *TaskInstanceGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tigb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskinstance.Label}
	default:
		err = fmt.Errorf("ent: TaskInstanceGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tigb *TaskInstanceGroupBy) Float64X(ctx context.Context) float64 {
	v, err := tigb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (tigb *TaskInstanceGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tigb.fields) > 1 {
		return nil, errors.New("ent: TaskInstanceGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tigb *TaskInstanceGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tigb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tigb *TaskInstanceGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tigb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskinstance.Label}
	default:
		err = fmt.Errorf("ent: TaskInstanceGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tigb *TaskInstanceGroupBy) BoolX(ctx context.Context) bool {
	v, err := tigb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tigb *TaskInstanceGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tigb.fields {
		if !taskinstance.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tigb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tigb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tigb *TaskInstanceGroupBy) sqlQuery() *sql.Selector {
	selector := tigb.sql.Select()
	aggregation := make([]string, 0, len(tigb.fns))
	for _, fn := range tigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(tigb.fields)+len(tigb.fns))
		for _, f := range tigb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(tigb.fields...)...)
}

// TaskInstanceSelect is the builder for selecting fields of TaskInstance entities.
type TaskInstanceSelect struct {
	*TaskInstanceQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (tis *TaskInstanceSelect) Scan(ctx context.Context, v interface{}) error {
	if err := tis.prepareQuery(ctx); err != nil {
		return err
	}
	tis.sql = tis.TaskInstanceQuery.sqlQuery(ctx)
	return tis.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tis *TaskInstanceSelect) ScanX(ctx context.Context, v interface{}) {
	if err := tis.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (tis *TaskInstanceSelect) Strings(ctx context.Context) ([]string, error) {
	if len(tis.fields) > 1 {
		return nil, errors.New("ent: TaskInstanceSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := tis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tis *TaskInstanceSelect) StringsX(ctx context.Context) []string {
	v, err := tis.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (tis *TaskInstanceSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tis.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskinstance.Label}
	default:
		err = fmt.Errorf("ent: TaskInstanceSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tis *TaskInstanceSelect) StringX(ctx context.Context) string {
	v, err := tis.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (tis *TaskInstanceSelect) Ints(ctx context.Context) ([]int, error) {
	if len(tis.fields) > 1 {
		return nil, errors.New("ent: TaskInstanceSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := tis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tis *TaskInstanceSelect) IntsX(ctx context.Context) []int {
	v, err := tis.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (tis *TaskInstanceSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tis.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskinstance.Label}
	default:
		err = fmt.Errorf("ent: TaskInstanceSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tis *TaskInstanceSelect) IntX(ctx context.Context) int {
	v, err := tis.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (tis *TaskInstanceSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(tis.fields) > 1 {
		return nil, errors.New("ent: TaskInstanceSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := tis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tis *TaskInstanceSelect) Float64sX(ctx context.Context) []float64 {
	v, err := tis.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (tis *TaskInstanceSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tis.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskinstance.Label}
	default:
		err = fmt.Errorf("ent: TaskInstanceSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tis *TaskInstanceSelect) Float64X(ctx context.Context) float64 {
	v, err := tis.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (tis *TaskInstanceSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(tis.fields) > 1 {
		return nil, errors.New("ent: TaskInstanceSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := tis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tis *TaskInstanceSelect) BoolsX(ctx context.Context) []bool {
	v, err := tis.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (tis *TaskInstanceSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tis.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskinstance.Label}
	default:
		err = fmt.Errorf("ent: TaskInstanceSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tis *TaskInstanceSelect) BoolX(ctx context.Context) bool {
	v, err := tis.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tis *TaskInstanceSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tis.sql.Query()
	if err := tis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
