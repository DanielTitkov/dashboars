// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/taskcategory"
)

// TaskCategory is the model entity for the TaskCategory schema.
type TaskCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Display holds the value of the "display" field.
	Display bool `json:"display,omitempty"`
	// Meta holds the value of the "meta" field.
	Meta map[string]interface{} `json:"meta,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskCategoryQuery when eager-loading is set.
	Edges TaskCategoryEdges `json:"edges"`
}

// TaskCategoryEdges holds the relations/edges for other nodes in the graph.
type TaskCategoryEdges struct {
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e TaskCategoryEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[0] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskCategory) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case taskcategory.FieldMeta:
			values[i] = new([]byte)
		case taskcategory.FieldDisplay:
			values[i] = new(sql.NullBool)
		case taskcategory.FieldID:
			values[i] = new(sql.NullInt64)
		case taskcategory.FieldTitle, taskcategory.FieldDescription:
			values[i] = new(sql.NullString)
		case taskcategory.FieldCreateTime, taskcategory.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TaskCategory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskCategory fields.
func (tc *TaskCategory) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taskcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tc.ID = int(value.Int64)
		case taskcategory.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				tc.CreateTime = value.Time
			}
		case taskcategory.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				tc.UpdateTime = value.Time
			}
		case taskcategory.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				tc.Title = value.String
			}
		case taskcategory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				tc.Description = value.String
			}
		case taskcategory.FieldDisplay:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field display", values[i])
			} else if value.Valid {
				tc.Display = value.Bool
			}
		case taskcategory.FieldMeta:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field meta", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tc.Meta); err != nil {
					return fmt.Errorf("unmarshal field meta: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryTasks queries the "tasks" edge of the TaskCategory entity.
func (tc *TaskCategory) QueryTasks() *TaskQuery {
	return (&TaskCategoryClient{config: tc.config}).QueryTasks(tc)
}

// Update returns a builder for updating this TaskCategory.
// Note that you need to call TaskCategory.Unwrap() before calling this method if this TaskCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TaskCategory) Update() *TaskCategoryUpdateOne {
	return (&TaskCategoryClient{config: tc.config}).UpdateOne(tc)
}

// Unwrap unwraps the TaskCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TaskCategory) Unwrap() *TaskCategory {
	tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskCategory is not a transactional entity")
	}
	tc.config.driver = tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TaskCategory) String() string {
	var builder strings.Builder
	builder.WriteString("TaskCategory(")
	builder.WriteString(fmt.Sprintf("id=%v", tc.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(tc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(tc.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", title=")
	builder.WriteString(tc.Title)
	builder.WriteString(", description=")
	builder.WriteString(tc.Description)
	builder.WriteString(", display=")
	builder.WriteString(fmt.Sprintf("%v", tc.Display))
	builder.WriteString(", meta=")
	builder.WriteString(fmt.Sprintf("%v", tc.Meta))
	builder.WriteByte(')')
	return builder.String()
}

// TaskCategories is a parsable slice of TaskCategory.
type TaskCategories []*TaskCategory

func (tc TaskCategories) config(cfg config) {
	for _i := range tc {
		tc[_i].config = cfg
	}
}
