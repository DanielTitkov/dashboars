// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/task"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/taskinstance"
)

// TaskInstance is the model entity for the TaskInstance schema.
type TaskInstance struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Attempt holds the value of the "attempt" field.
	Attempt int `json:"attempt,omitempty"`
	// Success holds the value of the "success" field.
	Success *bool `json:"success,omitempty"`
	// Running holds the value of the "running" field.
	Running bool `json:"running,omitempty"`
	// Error holds the value of the "error" field.
	Error *string `json:"error,omitempty"`
	// Meta holds the value of the "meta" field.
	Meta map[string]interface{} `json:"meta,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskInstanceQuery when eager-loading is set.
	Edges          TaskInstanceEdges `json:"edges"`
	task_instances *int
}

// TaskInstanceEdges holds the relations/edges for other nodes in the graph.
type TaskInstanceEdges struct {
	// Items holds the value of the items edge.
	Items []*Item `json:"items,omitempty"`
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e TaskInstanceEdges) ItemsOrErr() ([]*Item, error) {
	if e.loadedTypes[0] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskInstanceEdges) TaskOrErr() (*Task, error) {
	if e.loadedTypes[1] {
		if e.Task == nil {
			// The edge task was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskInstance) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case taskinstance.FieldMeta:
			values[i] = new([]byte)
		case taskinstance.FieldSuccess, taskinstance.FieldRunning:
			values[i] = new(sql.NullBool)
		case taskinstance.FieldID, taskinstance.FieldAttempt:
			values[i] = new(sql.NullInt64)
		case taskinstance.FieldError:
			values[i] = new(sql.NullString)
		case taskinstance.FieldCreateTime, taskinstance.FieldUpdateTime, taskinstance.FieldStartTime, taskinstance.FieldEndTime:
			values[i] = new(sql.NullTime)
		case taskinstance.ForeignKeys[0]: // task_instances
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TaskInstance", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskInstance fields.
func (ti *TaskInstance) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taskinstance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ti.ID = int(value.Int64)
		case taskinstance.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ti.CreateTime = value.Time
			}
		case taskinstance.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ti.UpdateTime = value.Time
			}
		case taskinstance.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				ti.StartTime = value.Time
			}
		case taskinstance.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				ti.EndTime = value.Time
			}
		case taskinstance.FieldAttempt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attempt", values[i])
			} else if value.Valid {
				ti.Attempt = int(value.Int64)
			}
		case taskinstance.FieldSuccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field success", values[i])
			} else if value.Valid {
				ti.Success = new(bool)
				*ti.Success = value.Bool
			}
		case taskinstance.FieldRunning:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field running", values[i])
			} else if value.Valid {
				ti.Running = value.Bool
			}
		case taskinstance.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				ti.Error = new(string)
				*ti.Error = value.String
			}
		case taskinstance.FieldMeta:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field meta", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ti.Meta); err != nil {
					return fmt.Errorf("unmarshal field meta: %w", err)
				}
			}
		case taskinstance.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field task_instances", value)
			} else if value.Valid {
				ti.task_instances = new(int)
				*ti.task_instances = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryItems queries the "items" edge of the TaskInstance entity.
func (ti *TaskInstance) QueryItems() *ItemQuery {
	return (&TaskInstanceClient{config: ti.config}).QueryItems(ti)
}

// QueryTask queries the "task" edge of the TaskInstance entity.
func (ti *TaskInstance) QueryTask() *TaskQuery {
	return (&TaskInstanceClient{config: ti.config}).QueryTask(ti)
}

// Update returns a builder for updating this TaskInstance.
// Note that you need to call TaskInstance.Unwrap() before calling this method if this TaskInstance
// was returned from a transaction, and the transaction was committed or rolled back.
func (ti *TaskInstance) Update() *TaskInstanceUpdateOne {
	return (&TaskInstanceClient{config: ti.config}).UpdateOne(ti)
}

// Unwrap unwraps the TaskInstance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ti *TaskInstance) Unwrap() *TaskInstance {
	tx, ok := ti.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskInstance is not a transactional entity")
	}
	ti.config.driver = tx.drv
	return ti
}

// String implements the fmt.Stringer.
func (ti *TaskInstance) String() string {
	var builder strings.Builder
	builder.WriteString("TaskInstance(")
	builder.WriteString(fmt.Sprintf("id=%v", ti.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(ti.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(ti.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", start_time=")
	builder.WriteString(ti.StartTime.Format(time.ANSIC))
	builder.WriteString(", end_time=")
	builder.WriteString(ti.EndTime.Format(time.ANSIC))
	builder.WriteString(", attempt=")
	builder.WriteString(fmt.Sprintf("%v", ti.Attempt))
	if v := ti.Success; v != nil {
		builder.WriteString(", success=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", running=")
	builder.WriteString(fmt.Sprintf("%v", ti.Running))
	if v := ti.Error; v != nil {
		builder.WriteString(", error=")
		builder.WriteString(*v)
	}
	builder.WriteString(", meta=")
	builder.WriteString(fmt.Sprintf("%v", ti.Meta))
	builder.WriteByte(')')
	return builder.String()
}

// TaskInstances is a parsable slice of TaskInstance.
type TaskInstances []*TaskInstance

func (ti TaskInstances) config(cfg config) {
	for _i := range ti {
		ti[_i].config = cfg
	}
}
