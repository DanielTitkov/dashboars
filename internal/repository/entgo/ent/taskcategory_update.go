// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/task"
	"github.com/DanielTitkov/dashboars/internal/repository/entgo/ent/taskcategory"
)

// TaskCategoryUpdate is the builder for updating TaskCategory entities.
type TaskCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *TaskCategoryMutation
}

// Where appends a list predicates to the TaskCategoryUpdate builder.
func (tcu *TaskCategoryUpdate) Where(ps ...predicate.TaskCategory) *TaskCategoryUpdate {
	tcu.mutation.Where(ps...)
	return tcu
}

// SetUpdateTime sets the "update_time" field.
func (tcu *TaskCategoryUpdate) SetUpdateTime(t time.Time) *TaskCategoryUpdate {
	tcu.mutation.SetUpdateTime(t)
	return tcu
}

// SetTitle sets the "title" field.
func (tcu *TaskCategoryUpdate) SetTitle(s string) *TaskCategoryUpdate {
	tcu.mutation.SetTitle(s)
	return tcu
}

// SetDescription sets the "description" field.
func (tcu *TaskCategoryUpdate) SetDescription(s string) *TaskCategoryUpdate {
	tcu.mutation.SetDescription(s)
	return tcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tcu *TaskCategoryUpdate) SetNillableDescription(s *string) *TaskCategoryUpdate {
	if s != nil {
		tcu.SetDescription(*s)
	}
	return tcu
}

// ClearDescription clears the value of the "description" field.
func (tcu *TaskCategoryUpdate) ClearDescription() *TaskCategoryUpdate {
	tcu.mutation.ClearDescription()
	return tcu
}

// SetDisplay sets the "display" field.
func (tcu *TaskCategoryUpdate) SetDisplay(b bool) *TaskCategoryUpdate {
	tcu.mutation.SetDisplay(b)
	return tcu
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (tcu *TaskCategoryUpdate) SetNillableDisplay(b *bool) *TaskCategoryUpdate {
	if b != nil {
		tcu.SetDisplay(*b)
	}
	return tcu
}

// SetMeta sets the "meta" field.
func (tcu *TaskCategoryUpdate) SetMeta(m map[string]interface{}) *TaskCategoryUpdate {
	tcu.mutation.SetMeta(m)
	return tcu
}

// ClearMeta clears the value of the "meta" field.
func (tcu *TaskCategoryUpdate) ClearMeta() *TaskCategoryUpdate {
	tcu.mutation.ClearMeta()
	return tcu
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (tcu *TaskCategoryUpdate) AddTaskIDs(ids ...int) *TaskCategoryUpdate {
	tcu.mutation.AddTaskIDs(ids...)
	return tcu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (tcu *TaskCategoryUpdate) AddTasks(t ...*Task) *TaskCategoryUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcu.AddTaskIDs(ids...)
}

// Mutation returns the TaskCategoryMutation object of the builder.
func (tcu *TaskCategoryUpdate) Mutation() *TaskCategoryMutation {
	return tcu.mutation
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (tcu *TaskCategoryUpdate) ClearTasks() *TaskCategoryUpdate {
	tcu.mutation.ClearTasks()
	return tcu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (tcu *TaskCategoryUpdate) RemoveTaskIDs(ids ...int) *TaskCategoryUpdate {
	tcu.mutation.RemoveTaskIDs(ids...)
	return tcu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (tcu *TaskCategoryUpdate) RemoveTasks(t ...*Task) *TaskCategoryUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcu *TaskCategoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tcu.defaults()
	if len(tcu.hooks) == 0 {
		if err = tcu.check(); err != nil {
			return 0, err
		}
		affected, err = tcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tcu.check(); err != nil {
				return 0, err
			}
			tcu.mutation = mutation
			affected, err = tcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tcu.hooks) - 1; i >= 0; i-- {
			if tcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *TaskCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *TaskCategoryUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *TaskCategoryUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcu *TaskCategoryUpdate) defaults() {
	if _, ok := tcu.mutation.UpdateTime(); !ok {
		v := taskcategory.UpdateDefaultUpdateTime()
		tcu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcu *TaskCategoryUpdate) check() error {
	if v, ok := tcu.mutation.Title(); ok {
		if err := taskcategory.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "TaskCategory.title": %w`, err)}
		}
	}
	if v, ok := tcu.mutation.Description(); ok {
		if err := taskcategory.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "TaskCategory.description": %w`, err)}
		}
	}
	return nil
}

func (tcu *TaskCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskcategory.Table,
			Columns: taskcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: taskcategory.FieldID,
			},
		},
	}
	if ps := tcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskcategory.FieldUpdateTime,
		})
	}
	if value, ok := tcu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taskcategory.FieldTitle,
		})
	}
	if value, ok := tcu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taskcategory.FieldDescription,
		})
	}
	if tcu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: taskcategory.FieldDescription,
		})
	}
	if value, ok := tcu.mutation.Display(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taskcategory.FieldDisplay,
		})
	}
	if value, ok := tcu.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: taskcategory.FieldMeta,
		})
	}
	if tcu.mutation.MetaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: taskcategory.FieldMeta,
		})
	}
	if tcu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskcategory.TasksTable,
			Columns: []string{taskcategory.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !tcu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskcategory.TasksTable,
			Columns: []string{taskcategory.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskcategory.TasksTable,
			Columns: []string{taskcategory.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TaskCategoryUpdateOne is the builder for updating a single TaskCategory entity.
type TaskCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskCategoryMutation
}

// SetUpdateTime sets the "update_time" field.
func (tcuo *TaskCategoryUpdateOne) SetUpdateTime(t time.Time) *TaskCategoryUpdateOne {
	tcuo.mutation.SetUpdateTime(t)
	return tcuo
}

// SetTitle sets the "title" field.
func (tcuo *TaskCategoryUpdateOne) SetTitle(s string) *TaskCategoryUpdateOne {
	tcuo.mutation.SetTitle(s)
	return tcuo
}

// SetDescription sets the "description" field.
func (tcuo *TaskCategoryUpdateOne) SetDescription(s string) *TaskCategoryUpdateOne {
	tcuo.mutation.SetDescription(s)
	return tcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tcuo *TaskCategoryUpdateOne) SetNillableDescription(s *string) *TaskCategoryUpdateOne {
	if s != nil {
		tcuo.SetDescription(*s)
	}
	return tcuo
}

// ClearDescription clears the value of the "description" field.
func (tcuo *TaskCategoryUpdateOne) ClearDescription() *TaskCategoryUpdateOne {
	tcuo.mutation.ClearDescription()
	return tcuo
}

// SetDisplay sets the "display" field.
func (tcuo *TaskCategoryUpdateOne) SetDisplay(b bool) *TaskCategoryUpdateOne {
	tcuo.mutation.SetDisplay(b)
	return tcuo
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (tcuo *TaskCategoryUpdateOne) SetNillableDisplay(b *bool) *TaskCategoryUpdateOne {
	if b != nil {
		tcuo.SetDisplay(*b)
	}
	return tcuo
}

// SetMeta sets the "meta" field.
func (tcuo *TaskCategoryUpdateOne) SetMeta(m map[string]interface{}) *TaskCategoryUpdateOne {
	tcuo.mutation.SetMeta(m)
	return tcuo
}

// ClearMeta clears the value of the "meta" field.
func (tcuo *TaskCategoryUpdateOne) ClearMeta() *TaskCategoryUpdateOne {
	tcuo.mutation.ClearMeta()
	return tcuo
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (tcuo *TaskCategoryUpdateOne) AddTaskIDs(ids ...int) *TaskCategoryUpdateOne {
	tcuo.mutation.AddTaskIDs(ids...)
	return tcuo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (tcuo *TaskCategoryUpdateOne) AddTasks(t ...*Task) *TaskCategoryUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcuo.AddTaskIDs(ids...)
}

// Mutation returns the TaskCategoryMutation object of the builder.
func (tcuo *TaskCategoryUpdateOne) Mutation() *TaskCategoryMutation {
	return tcuo.mutation
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (tcuo *TaskCategoryUpdateOne) ClearTasks() *TaskCategoryUpdateOne {
	tcuo.mutation.ClearTasks()
	return tcuo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (tcuo *TaskCategoryUpdateOne) RemoveTaskIDs(ids ...int) *TaskCategoryUpdateOne {
	tcuo.mutation.RemoveTaskIDs(ids...)
	return tcuo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (tcuo *TaskCategoryUpdateOne) RemoveTasks(t ...*Task) *TaskCategoryUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcuo.RemoveTaskIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcuo *TaskCategoryUpdateOne) Select(field string, fields ...string) *TaskCategoryUpdateOne {
	tcuo.fields = append([]string{field}, fields...)
	return tcuo
}

// Save executes the query and returns the updated TaskCategory entity.
func (tcuo *TaskCategoryUpdateOne) Save(ctx context.Context) (*TaskCategory, error) {
	var (
		err  error
		node *TaskCategory
	)
	tcuo.defaults()
	if len(tcuo.hooks) == 0 {
		if err = tcuo.check(); err != nil {
			return nil, err
		}
		node, err = tcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tcuo.check(); err != nil {
				return nil, err
			}
			tcuo.mutation = mutation
			node, err = tcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tcuo.hooks) - 1; i >= 0; i-- {
			if tcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *TaskCategoryUpdateOne) SaveX(ctx context.Context) *TaskCategory {
	node, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcuo *TaskCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *TaskCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcuo *TaskCategoryUpdateOne) defaults() {
	if _, ok := tcuo.mutation.UpdateTime(); !ok {
		v := taskcategory.UpdateDefaultUpdateTime()
		tcuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcuo *TaskCategoryUpdateOne) check() error {
	if v, ok := tcuo.mutation.Title(); ok {
		if err := taskcategory.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "TaskCategory.title": %w`, err)}
		}
	}
	if v, ok := tcuo.mutation.Description(); ok {
		if err := taskcategory.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "TaskCategory.description": %w`, err)}
		}
	}
	return nil
}

func (tcuo *TaskCategoryUpdateOne) sqlSave(ctx context.Context) (_node *TaskCategory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskcategory.Table,
			Columns: taskcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: taskcategory.FieldID,
			},
		},
	}
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskcategory.FieldID)
		for _, f := range fields {
			if !taskcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taskcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskcategory.FieldUpdateTime,
		})
	}
	if value, ok := tcuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taskcategory.FieldTitle,
		})
	}
	if value, ok := tcuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taskcategory.FieldDescription,
		})
	}
	if tcuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: taskcategory.FieldDescription,
		})
	}
	if value, ok := tcuo.mutation.Display(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taskcategory.FieldDisplay,
		})
	}
	if value, ok := tcuo.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: taskcategory.FieldMeta,
		})
	}
	if tcuo.mutation.MetaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: taskcategory.FieldMeta,
		})
	}
	if tcuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskcategory.TasksTable,
			Columns: []string{taskcategory.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !tcuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskcategory.TasksTable,
			Columns: []string{taskcategory.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskcategory.TasksTable,
			Columns: []string{taskcategory.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskCategory{config: tcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
